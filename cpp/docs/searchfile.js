var DB = [
['Adaption', '(Glossary)', 'href="PAGE_Glossary.html#GLOSSARY_Adaption" title="Functionality that allows to access built-in type or data types from external libraries in the same way as SeqAn classes.">'],
['Affine Gap Costs', '(Glossary)', 'href="PAGE_Glossary.html#GLOSSARY_Affine+_Gap+_Costs" title="A scoring scheme that defines the score for a gap of length $n$ as $gap_open + (n-1)* gap_extend$.">'],
['Alignment', '(Glossary)', 'href="PAGE_Glossary.html#GLOSSARY_Alignment" title="An arrangement of two or more sequences: Each character is connected to at most one character for each other sequence, and that the characters in each sequence are ordered in the same way as the connected characters in other sequences.">'],
['Blank', '(Glossary)', 'href="PAGE_Glossary.html#GLOSSARY_Blank" title="One position within a @glos:gap@ area of an alignment.">'],
['Concept', '(Glossary)', 'href="PAGE_Glossary.html#GLOSSARY_Concept" title="A kind of interface used in generic programmic that is not formulated in C++ but only a part of the documentation.">'],
['Gap', '(Glossary)', 'href="PAGE_Glossary.html#GLOSSARY_Gap" title="A part of an @glos:alignment@ in which characters of one sequence are not aligned to characters of the other sequence.">'],
['Haystack', '(Glossary)', 'href="PAGE_Glossary.html#GLOSSARY_Haystack" title="The sequence that is searched for @glos:needles@.">'],
['Index', '(Glossary)', 'href="PAGE_Glossary.html#GLOSSARY_Index" title="A data structure for faster searching in sequences.">'],
['Linear Gap Costs', '(Glossary)', 'href="PAGE_Glossary.html#GLOSSARY_Linear+_Gap+_Costs" title="A scoring scheme that defines the score for a gap to be proportional to the length of the gap.">'],
['Metafunction', '(Glossary)', 'href="PAGE_Glossary.html#GLOSSARY_Metafunction" title=" A C++ construct that is used to determine types and constants at compile time.">'],
['Needle', '(Glossary)', 'href="PAGE_Glossary.html#GLOSSARY_Needle" title="The sequence that is searched in the @glos:haystack@.">'],
['Scoring Scheme', '(Glossary)', 'href="PAGE_Glossary.html#GLOSSARY_Scoring+_Scheme" title="A rule for calculating the similarity between two values or between a value and a @glos:blank@.">'],
['SeqAn', '(Glossary)', 'href="PAGE_Glossary.html#GLOSSARY_Seq_An" title=" The C++ library for sequence analysis.">'],
['Specialization', '(Glossary)', 'href="PAGE_Glossary.html#GLOSSARY_Specialization" title="A refinement of a class that was defined using @glos:Template Subclassing@.">'],
['Tag', '(Glossary)', 'href="PAGE_Glossary.html#GLOSSARY_Tag" title="A type that acts as a switch when applied as argument to functions or @glos:Metafunction|metafunctions@.">'],
['Template Subclassing', '(Glossary)', 'href="PAGE_Glossary.html#GLOSSARY_Template+_Subclassing" title="An alternative to inheritance for the refinement of classes that is based on class template specialization.">'],
['Trie', '(Glossary)', 'href="PAGE_Glossary.html#GLOSSARY_Trie" title="A tree shaped automaton.">'],
['AbndmAlgo', '(Spec)', 'href="SPEC_Abndm_Algo.html" title=" Approximate Backward Nondeterministic Dawg Matching algorithm. Approximate string matching using bit parallelism.">'],
['absFreqOfLettersInSeq', '(Function)', 'href="FUNCTION.abs_Freq_Of_Letters_In_Seq.html" title="Counts the number of times each residue of a fixed sequence alphabet occurs in a given sequence.">'],
['absFreqOfLettersInSetOfSeqs', '(Function)', 'href="FUNCTION.abs_Freq_Of_Letters_In_Set_Of_Seqs.html" title="Counts the number of times each residue of a fixed sequence alphabet occurs in a given set of sequences.">'],
['Adaptions', '', '<a target=_parent href="INDEXPAGE_Adaption.html">'],
['Adaptor Iterator', '(Spec)', 'href="SPEC_Adaptor+_Iterator.html" title="Adapts iterators to Concept.Rooted Iterator.">'],
['add', '(Function)', 'href="FUNCTION.map_23add.html" title="Insert another value into a multi map.">'],
['addArgumentText', '(Function)', 'href="FUNCTION.add_Argument_Text.html" title="Return a Class.CommandLineOption object extended by an argument text.">'],
['addChild', '(Function)', 'href="FUNCTION.add_Child.html" title="Adds a new child vertex to a parent vertex. Optionally a cargo can be attached to the parent-child edge.">'],
['addEdge', '(Function)', 'href="FUNCTION.add_Edge.html" title="Adds a new edge to the graph, either with or without cargo.">'],
['addEdges', '(Function)', 'href="FUNCTION.add_Edges.html" title="Shortcut to add multiple edges at once. Creates vertices implicitly.">'],
['addHelpLine', '(Function)', 'href="FUNCTION.add_Help_Line.html" title="Adds an extra line of text below the help text of an option.">'],
['addInterval', '(Function)', 'href="FUNCTION.add_Interval.html" title="Adds an interval to an interval tree.">'],
['addLine', '(Function)', 'href="FUNCTION.add_Line.html" title="Adds a line of text to the help output of the Class.CommandLineParser.">'],
['addOption', '(Function)', 'href="FUNCTION.add_Option.html" title="Adds a Class.CommandLineOption object to the Class.CommandLineParser.">'],
['addSection', '(Function)', 'href="FUNCTION.add_Section.html" title="Adds a new section the help output of the Class.CommandLineParser.">'],
['addSeed', '(Function)', 'href="FUNCTION.add_Seed.html" title="Adds a seed to an existing set.">'],
['addSeeds', '(Function)', 'href="FUNCTION.add_Seeds.html" title="Adds several seeds to an existing set. If a merging or chaining algorithm is used seeds are added if the merging or chaining fails.">'],
['addTitleLine', '(Function)', 'href="FUNCTION.add_Title_Line.html" title="Adds a line of text to the title output of the Class.CommandLineParser.">'],
['addUsageLine', '(Function)', 'href="FUNCTION.add_Usage_Line.html" title="Adds a line of text to the usage output of the Class.CommandLineParser.">'],
['addValue', '(Function)', 'href="FUNCTION.add_Value.html" title="Adds a value of a specific type to each element of a given Class.FrequencyDistribution object.">'],
['addVersionLine', '(Function)', 'href="FUNCTION.add_Version_Line.html" title="Adds a line of text to the version output of the Class.CommandLineParser.">'],
['addVertex', '(Function)', 'href="FUNCTION.add_Vertex.html" title="Adds a new vertex to the graph.">'],
['Adjacency Iterator', '(Spec)', 'href="SPEC_Adjacency+_Iterator.html" title="Adjacency iterator for Class.Graph.">'],
['adjustTop', '(Function)', 'href="FUNCTION.adjust_Top.html" title="Adjusts the priority of the first item.">'],
['AhoCorasick', '(Spec)', 'href="SPEC_Aho_Corasick.html" title=" Multiple exact string matching using Aho-Corasick.">'],
['Align', '(Class)', 'href="CLASS_Align.html" title="An alignment of sequences.">'],
['AlignColIterator', '(Spec)', 'href="SPEC_Align_Col_Iterator.html" title="Iterator for Class.AlignCols pseudo container.">'],
['AlignCols', '(Class)', 'href="CLASS_Align_Cols.html" title="Pseudo columns container for row-based alignment classes.">'],
['AlignConfig', '(Class)', 'href="CLASS_Align_Config.html" title="The AlignConfig class encapsulates how DP is carried out. It indicates at what ends gaps are free, the so-called free ends-space alignments.">'],
['AlignedReadLayout', '(Class)', 'href="CLASS_Aligned_Read_Layout.html" title="Stores a 2-dimensional visible layout of a multi-read alignment.">'],
['alignedReadStore', '(Memvar)', 'href="MEMVAR_Fragment_Store_23aligned_Read_Store.html" title="String that stores &lt;alignId, readId, contigId, pairMatchId, beginPos, endPos, gaps>.">'],
['AlignedReadStoreElement', '(Class)', 'href="CLASS_Aligned_Read_Store_Element.html" title="Represents an alignment between read and contig.">'],
['AlignedReadStoreElement', '(Memfunc)', 'href="MEMFUNC_Aligned_Read_Store_Element_23_Aligned_Read_Store_Element.html" title="Constructor">'],
['alignedReadTagStore', '(Memvar)', 'href="MEMVAR_Fragment_Store_23aligned_Read_Tag_Store.html" title="String that maps from alignId to alignTag.">'],
['alignment', '(Function)', 'href="FUNCTION.alignment.html" title="Returns an alignment of the occurences of the Function.representative substring in the index text.">'],
['Alignment Graph', '(Spec)', 'href="SPEC_Alignment+_Graph.html" title="An alignment graph.">'],
['Alignment Graph Combination', '(Tag)', 'href="TAG_Alignment+_Graph+_Combination.html" title="A tag to specify how to combine alignment graphs.">'],
['Alignment Graph Format', '(Tag)', 'href="TAG_Alignment+_Graph+_Format.html" title="A file format to write an alignment graph.">'],
['alignmentEvaluation', '(Function)', 'href="FUNCTION.alignment_Evaluation.html" title="Given a multiple alignment, this function calculates all kinds of alignment statistics.">'],
['alignQualityStore', '(Memvar)', 'href="MEMVAR_Fragment_Store_23align_Quality_Store.html" title="String that maps from alignId to &lt;pairScore, score, errors>.">'],
['AlignQualityStoreElement', '(Class)', 'href="CLASS_Align_Quality_Store_Element.html" title="Stores alignment qualities.">'],
['AlignQualityStoreElement', '(Memfunc)', 'href="MEMFUNC_Align_Quality_Store_Element_23_Align_Quality_Store_Element.html" title="Constructor">'],
['All Pairs Shortest Path', '(Demo)', 'href="DEMO_All+_Pairs+_Shortest+_Path.html" title="Computing all-pairs shortest paths.">'],
['Alloc String', '(Spec)', 'href="SPEC_Alloc+_String.html" title="Expandable string that is stored on heap.">'],
['allocate', '(Function)', 'href="FUNCTION.allocate.html" title="Allocates memory from heap.">'],
['Allocator', '(Class)', 'href="CLASS_Allocator.html" title="Manager for allocated memory.">'],
['Allocator', '(Concept)', 'href="CONCEPT_Allocator.html" title="Object that manages memory allocation.">'],
['Allocator Usage', '(Tag)', 'href="TAG_Allocator+_Usage.html" title="The purpose of an allocated memory block.">'],
['Allocators', '(Demo)', 'href="DEMO_Allocators.html" title="Examples for memory allocation.">'],
['AllowsFastRandomAccess', '(Metafunction)', 'href="METAFUNCTION_Allows_Fast_Random_Access.html" title="Determines whether a sequence efficiently supports random access.">'],
['allPairsShortestPath', '(Function)', 'href="FUNCTION.all_Pairs_Shortest_Path.html" title="Finds shortest paths between all pairs of vertices in a graph.">'],
['alpha', '(Memvar)', 'href="MEMVAR_Open_Addressing_23alpha.html" title="Load factor. Controls space/time-tradeoff and must be greater 1. Default value is 1.6.">'],
['Alphabet', '(Metafunction)', 'href="METAFUNCTION_Alphabet.html" title="Access to the Alphabet type.">'],
['Alphabet Expansion', '(Spec)', 'href="SPEC_Alphabet+_Expansion.html" title="Modifier that adds a character to an alphabet.">'],
['Alphabets', '(Demo)', 'href="DEMO_Alphabets.html" title="Examples for common alphabets.">'],
['AminoAcid', '(Spec)', 'href="SPEC_Amino_Acid.html" title="Iupac code for amino acids.">'],
['AnchorGaps', '(Spec)', 'href="SPEC_Anchor_Gaps.html" title="Stores gaps anchors of the first characters behind gaps.">'],
['annotationNameStore', '(Memvar)', 'href="MEMVAR_Fragment_Store_23annotation_Name_Store.html" title="String that maps from annoId to annoName.">'],
['annotationStore', '(Memvar)', 'href="MEMVAR_Fragment_Store_23annotation_Store.html" title="String that maps from annoId to &lt;contigId, typeId, beginPos, endPos, parentId, lastChildId, nextSiblingId, values>.">'],
['append', '(Function)', 'href="FUNCTION.append.html" title="Concatenate two containers.">'],
['appendAlignedRead', '(Function)', 'href="FUNCTION.append_Aligned_Read.html" title="Appends an aligned read entry to a fragment store.">'],
['appendDiag', '(Function)', 'href="FUNCTION.append_Diag.html" title=" Adds diagonal to the seed.">'],
['appendMatePair', '(Function)', 'href="FUNCTION.append_Mate_Pair.html" title="Appends two paired-end reads to a fragment store.">'],
['appendName', '(Function)', 'href="FUNCTION.append_Name.html" title="Appends a name to a name store.">'],
['appendRead', '(Function)', 'href="FUNCTION.append_Read.html" title="Appends a read to a fragment store.">'],
['appendSeqs', '(Function)', 'href="FUNCTION.append_Seqs.html" title="Appends all sequences stored in files of directory to a StringSet.">'],
['appendValue', '(Function)', 'href="FUNCTION.append_Value.html" title="Appends a value to a container.">'],
['Approximate Searching', '(Demo)', 'href="DEMO_Approximate+_Searching.html" title="Approximate string matching.">'],
['argumentCount', '(Function)', 'href="FUNCTION.argument_Count.html" title="Returns the count of passed arguments.">'],
['argumentText', '(Function)', 'href="FUNCTION.argument_Text.html" title="Returns the argument text of a Class.CommandLineOption object.">'],
['Array String', '(Spec)', 'href="SPEC_Array+_String.html" title="Fast, static-size string.">'],
['arrayClearSpace', '(Function)', 'href="FUNCTION.array_Clear_Space.html" title="Destroys the begin of an array and keeps the rest.">'],
['arrayConstruct', '(Function)', 'href="FUNCTION.array_Construct.html" title="Construct objects in a given memory buffer.">'],
['arrayConstructCopy', '(Function)', 'href="FUNCTION.array_Construct_Copy.html" title="Copy constructs an array of objects into in a given memory buffer.">'],
['arrayConstructMove', '(Function)', 'href="FUNCTION.array_Construct_Move.html" title="Move constructs an array of objects into in a given memory buffer.">'],
['arrayCopy', '(Function)', 'href="FUNCTION.array_Copy.html" title="Copies a range of objects into another range of objects.">'],
['arrayCopyBackward', '(Function)', 'href="FUNCTION.array_Copy_Backward.html" title="Copies a range of objects into another range of objects starting from the last element.">'],
['arrayCopyForward', '(Function)', 'href="FUNCTION.array_Copy_Forward.html" title="Copies a range of objects into another range of objects starting from the first element.">'],
['arrayDestruct', '(Function)', 'href="FUNCTION.array_Destruct.html" title="Destroys an array of objects.">'],
['arrayFill', '(Function)', 'href="FUNCTION.array_Fill.html" title="Assigns one object to each element of a range.">'],
['ArrayGaps', '(Spec)', 'href="SPEC_Array_Gaps.html" title="Stores gaps sizes in an array.">'],
['arrayMove', '(Function)', 'href="FUNCTION.array_Move.html" title="Moves a range of objects into another range of objects.">'],
['arrayMoveBackward', '(Function)', 'href="FUNCTION.array_Move_Backward.html" title="Moves a range of objects into another range of objects starting from the last element.">'],
['arrayMoveForward', '(Function)', 'href="FUNCTION.array_Move_Forward.html" title="Moves a range of objects into another range of objects starting from the first element.">'],
['assign', '(Function)', 'href="FUNCTION.assign.html" title="Assigns one object to another object.">'],
['assignBeginState', '(Function)', 'href="FUNCTION.assign_Begin_State.html" title="Assigns a begin state.">'],
['assignCargo', '(Function)', 'href="FUNCTION.assign_Cargo.html" title="Assigns a new cargo to the edge.">'],
['assignCroppedSeqId', '(Function)', 'href="FUNCTION.assign_Cropped_Seq_Id.html" title="Extracts the sequence id up to the first whitespace of a sequence file fragment.">'],
['assignEmissionProbability', '(Function)', 'href="FUNCTION.assign_Emission_Probability.html" title="Assigns a new emission probability.">'],
['assignEndState', '(Function)', 'href="FUNCTION.assign_End_State.html" title="Assigns an end state.">'],
['assignNextS', '(Function)', 'href="FUNCTION.assign_Next_S.html" title="Assigns another EdgeStump to the next source pointer.">'],
['assignNextT', '(Function)', 'href="FUNCTION.assign_Next_T.html" title="Assigns another EdgeStump to the next target pointer.">'],
['assignProperty', '(Function)', 'href="FUNCTION.assign_Property.html" title="Assigns a property to an item in the property map.">'],
['assignQual', '(Function)', 'href="FUNCTION.assign_Qual.html" title="Extracts the quality values of a sequence file fragment.">'],
['assignQualId', '(Function)', 'href="FUNCTION.assign_Qual_Id.html" title="Extracts the quality value id of a sequence file fragment.">'],
['assignQualities', '(Function)', 'href="FUNCTION.assign_Qualities.html" title="Assign quality value between strings.">'],
['assignQualityValue', '(Function)', 'href="FUNCTION.assign_Quality_Value.html" title="Assign quality to a character from an alphabet with integrated quality.">'],
['assignRoot', '(Function)', 'href="FUNCTION.assign_Root.html" title="Assigns a new root vertex to the graph.">'],
['assignSeq', '(Function)', 'href="FUNCTION.assign_Seq.html" title="Extracts the sequence part of a sequence file fragment.">'],
['assignSeqId', '(Function)', 'href="FUNCTION.assign_Seq_Id.html" title="Extracts the sequence id of a sequence file fragment.">'],
['assignSilentStatus', '(Function)', 'href="FUNCTION.assign_Silent_Status.html" title="Assigns a silent status to a state.">'],
['assignSource', '(Function)', 'href="FUNCTION_Graph_23assign_Source.html" title="Assigns a source vertex to an edge.">'],
['assignSource', '(Function)', 'href="FUNCTION.assign_Source.html" title="Assigns the source to a new value.">'],
['assignStringSet', '(Function)', 'href="FUNCTION.assign_String_Set.html" title="Assigns a new string set to an alignment graph.">'],
['assignTarget', '(Function)', 'href="FUNCTION.assign_Target.html" title="Assigns a target vertex to an edge.">'],
['assignTransitionProbability', '(Function)', 'href="FUNCTION.assign_Transition_Probability.html" title="Assigns a new transition probability.">'],
['assignValue', '(Function)', 'href="FUNCTION.assign_Value.html" title="Assigns value to item.">'],
['assignValueById', '(Function)', 'href="FUNCTION.assign_Value_By_Id.html" title="Adds a new string to the StringSet and returns an id.">'],
['Async', '(Spec)', 'href="SPEC_Async.html" title="File structure supporting synchronous and asynchronous input/output access.">'],
['asyncReadAt', '(Function)', 'href="FUNCTION.async_Read_At.html" title="Asynchronously loads records from a specific position in a file.">'],
['AsyncRequest', '(Class)', 'href="CLASS_Async_Request.html" title="Associated with an asynchronous I/O request.">'],
['asyncWriteAt', '(Function)', 'href="FUNCTION.async_Write_At.html" title="Asynchronously saves records to a specific position in a file.">'],
['atBegin', '(Function)', 'href="FUNCTION.at_Begin.html" title="Determines whether an iterator is at the beginning position.">'],
['atEnd', '(Function)', 'href="FUNCTION.at_End.html" title="Determines whether an iterator is at the end position.">'],
['atEndOfSequence', '(Function)', 'href="FUNCTION.at_End_Of_Sequence.html" title="Returns true if the iterator is at the end of a sequence.">'],
['atNil', '(Function)', 'href="FUNCTION.at_Nil.html" title="Tests whether iterator is at nil position.">'],
['atomicAdd', '(Function)', 'href="FUNCTION.atomic_Add.html" title="Atomically add an integer to another integer.">'],
['atomicCas', '(Function)', 'href="FUNCTION.atomic_Cas.html" title="Compare-and-Swap operation.">'],
['atomicDec', '(Function)', 'href="FUNCTION.atomic_Dec.html" title="Atomically decrement an integer.">'],
['atomicInc', '(Function)', 'href="FUNCTION.atomic_Inc.html" title="Atomically increment an integer.">'],
['atomicMax', '(Function)', 'href="FUNCTION.atomic_Max.html" title="Lock-free implementation of x = max(x, y).">'],
['atomicMin', '(Function)', 'href="FUNCTION.atomic_Min.html" title="Lock-free implementation of x = min(x, y).">'],
['atomicOr', '(Function)', 'href="FUNCTION.atomic_Or.html" title="Atomically combine two integers with OR operation.">'],
['atomicXor', '(Function)', 'href="FUNCTION.atomic_Xor.html" title="Atomically combine wto integers with XOR operation.">'],
['Automaton', '(Spec)', 'href="SPEC_Automaton.html" title="An Automaton has directed edges, labeled with input symbols, and a distinct start state, called root. The input symbols require the use of a third parameter: The alphabet of the input symbols.">'],
['AutoSeqFormat', '(Class)', 'href="CLASS_Auto_Seq_Format.html" title="Auto-detects and stores a file format.">'],
['back', '(Function)', 'href="FUNCTION.back.html" title="The last item in container.">'],
['backgroundFrequency', '(Function)', 'href="FUNCTION.background_Frequency.html" title="Determines the background letter frequencies in a given dataset">'],
['backwardAlgorithm', '(Function)', 'href="FUNCTION.backward_Algorithm.html" title="Implements the backward algorithm.">'],
['bandedAlignment', '(Function)', 'href="FUNCTION.banded_Alignment.html" title="Calculates a banded alignment around a Seed.">'],
['bandedChainAlignment', '(Function)', 'href="FUNCTION.banded_Chain_Alignment.html" title=" Calculates a banded alignment around a chain of seeds.">'],
['BasicInfo', '(Spec)', 'href="SPEC_Basic_Info.html" title="Stores only the basic pieces of information delivered with an alignment in a Blast report.">'],
['begin', '(Function)', 'href="FUNCTION.begin.html" title="The begin of a container.">'],
['beginPos', '(Memvar)', 'href="MEMVAR_Aligned_Read_Store_Element_23begin_Pos.html" title="Begin position of the alignment in gap-space.">'],
['beginPosition', '(Function)', 'href="FUNCTION.begin_Position.html" title="Begin position of object in host.">'],
['beginRead', '(Function)', 'href="FUNCTION.begin_Read.html" title="Initiates a read process.">'],
['beginState', '(Function)', 'href="FUNCTION.begin_State.html" title="Returns a reference to the begin state.">'],
['beginWrite', '(Function)', 'href="FUNCTION.begin_Write.html" title="Initiates a write process.">'],
['Bellman-Ford Algorithm', '(Demo)', 'href="DEMO_Bellman-_Ford+_Algorithm.html" title="Computing single source shortest paths using Bellman-Ford algorithm.">'],
['bellmanFordAlgorithm', '(Function)', 'href="FUNCTION.bellman_Ford_Algorithm.html" title="Computes shortest paths from a single source in a directed graph.">'],
['Bfam', '(Spec)', 'href="SPEC_Bfam.html" title="Backward Factor Automaton Matching algorithm.">'],
['Bfam&lt;Oracle&gt;', '(Spec)', 'href="SPEC_Bfam_3c_Oracle_3e.html" title="Backward Oracle Matching algorithm.">'],
['Bfam&lt;Trie&gt;', '(Spec)', 'href="SPEC_Bfam_3c_Trie_3e.html" title="Backward Suffix Trie Matching algorithm.">'],
['Bfs Iterator', '(Spec)', 'href="SPEC_Bfs+_Iterator.html" title="Breath-first search iterator for Class.Graph.">'],
['binomialCoefficient', '(Function)', 'href="FUNCTION.binomial_Coefficient.html" title="Calculates the binomial coefficient C(n,k).">'],
['Bit Compressed Pair', '(Spec)', 'href="SPEC_Bit+_Compressed+_Pair.html" title="Stores two arbitrary objects. Saves memory by packing bits with bit fields.">'],
['Bit Packed Tuple', '(Spec)', 'href="SPEC_Bit+_Packed+_Tuple.html" title="A plain fixed-length string. Saves memory by packing bits.">'],
['BitsPerValue', '(Metafunction)', 'href="METAFUNCTION_Bits_Per_Value.html" title="Number of bits needed to store a value.">'],
['Blast Reports', '(Demo)', 'href="DEMO_Blast+_Reports.html" title="Parsing the output of BLAST call.">'],
['BlastHit', '(Class)', 'href="CLASS_Blast_Hit.html" title="Object for storing Blast hits.">'],
['BlastHsp', '(Class)', 'href="CLASS_Blast_Hsp.html" title="Object for storing Blast HSPs.">'],
['BlastN', '(Spec)', 'href="SPEC_Blast_N.html" title="For BlastN Blast reports.">'],
['BlastP', '(Spec)', 'href="SPEC_Blast_P.html" title="For BlastP Blast reports.">'],
['BlastReport', '(Class)', 'href="CLASS_Blast_Report.html" title="Object for storing Blast report information.">'],
['Block String', '(Spec)', 'href="SPEC_Block+_String.html" title="String optimized for push_back, top, and pop (Stack behaviour).">'],
['Blosum30', '(Shortcut)', 'href="SHORTCUT_Blosum30.html" title="Blosum30 scoring matrix.">'],
['Blosum45', '(Shortcut)', 'href="SHORTCUT_Blosum45.html" title="Blosum45 scoring matrix.">'],
['Blosum62', '(Shortcut)', 'href="SHORTCUT_Blosum62.html" title="Blosum62 scoring matrix.">'],
['Blosum80', '(Shortcut)', 'href="SHORTCUT_Blosum80.html" title="Blosum80 scoring matrix.">'],
['BndmAlgo', '(Spec)', 'href="SPEC_Bndm_Algo.html" title=" Backward Nondeterministic Dawg Matching algorithm. Exact string matching using bit parallelism.">'],
['BottomUp Iterator', '(Spec)', 'href="SPEC_Bottom_Up+_Iterator.html" title="Iterator for an efficient postorder depth-first search in a suffix tree.">'],
['Breadth-First Search', '(Demo)', 'href="DEMO_Breadth-_First+_Search.html" title="Breadth-first search through a graph.">'],
['breadthFirstSearch', '(Function)', 'href="FUNCTION.breadth_First_Search.html" title="Implements a breadth-first search on a graph.">'],
['build', '(Memfunc)', 'href="MEMFUNC_Markov_Model_23build.html" title="Given a training set, computes the transition matrix, the character stationary distributions and the auxiliary information that give raise to an instance of MarkovModel">'],
['Bundle2', '(Class)', 'href="CLASS_Bundle2.html" title="Stores references to two arbitrary objects.">'],
['bundle2', '(Function)', 'href="FUNCTION.bundle2.html" title="Returns a bundle of two objects.">'],
['Bundle3', '(Class)', 'href="CLASS_Bundle3.html" title="Stores references to three arbitrary objects.">'],
['bundle3', '(Function)', 'href="FUNCTION.bundle3.html" title="Returns a bundle of three objects.">'],
['Bundle5', '(Class)', 'href="CLASS_Bundle5.html" title="Stores references to five arbitrary objects.">'],
['bundle5', '(Function)', 'href="FUNCTION.bundle5.html" title="Returns a bundle of five objects.">'],
['bwtAt', '(Function)', 'href="FUNCTION.bwt_At.html" title="Shortcut for value(indexBwt(..), ..).">'],
['BytesPerValue', '(Metafunction)', 'href="METAFUNCTION_Bytes_Per_Value.html" title="Number of bytes needed to store a value.">'],
['calculateInsertSizes', '(Function)', 'href="FUNCTION.calculate_Insert_Sizes.html" title="Calculates a string with insert sizes for each pair match.">'],
['calculateMateIndices', '(Function)', 'href="FUNCTION.calculate_Mate_Indices.html" title="Calculates a string that maps the readId of a read to the readId of its mate.">'],
['cancel', '(Function)', 'href="FUNCTION.cancel.html" title="Cancels an asynchronous request.">'],
['canParseString', '(Function)', 'href="FUNCTION.can_Parse_String.html" title="Test whether an automaton can parse a string completely.">'],
['capacity', '(Function)', 'href="FUNCTION.capacity.html" title="The maximal length.">'],
['cargo', '(Function)', 'href="FUNCTION.cargo.html" title="Access to the cargo.">'],
['cargo', '(Function)', 'href="FUNCTION.map_23cargo.html" title="Returns a cargo given a key.">'],
['cargo', '(Memvar)', 'href="MEMVAR_Interval_And_Cargo_23cargo.html" title="The stored cargo of type TCargo.">'],
['cargo', '(Memvar)', 'href="MEMVAR_Point_And_Cargo_23cargo.html" title="The stored cargo of type TCargo.">'],
['Cargo', '(Metafunction)', 'href="METAFUNCTION_Cargo.html" title="Type of additional data stored in an object.">'],
['Caster', '(Spec)', 'href="SPEC_Caster.html" title="Casts the input type in a specific output type.">'],
['center', '(Memvar)', 'href="MEMVAR_Interval_Tree_Node_23center.html" title="The center of the interval of type TValue.">'],
['Chained', '(Spec)', 'href="SPEC_Chained.html" title="Splits a large file into a chain of smaller files.">'],
['ChainedSeed', '(Spec)', 'href="SPEC_Chained_Seed.html" title="Describes a seed with start and end position2 and diagonal upper and lower bounds. Additionaly diagonal segments between start and end position2 are stored.">'],
['char array', '(Adaption)', 'href="ADAPTION.char+array.html" title="Zero terminated char[] or wchar_t[].">'],
['CharIterator', '(Shortcut)', 'href="SHORTCUT_Char_Iterator.html" title="Iterator for Shortcut.CharString.">'],
['CharString', '(Shortcut)', 'href="SHORTCUT_Char_String.html" title="A string of char.">'],
['childAt', '(Function)', 'href="FUNCTION.child_At.html" title="Shortcut for value(indexChildtab(..), ..).">'],
['childrenAreLeaves', '(Function)', 'href="FUNCTION.children_Are_Leaves.html" title="Test whether iterator points to a node with only leaf-children.">'],
['childVertex', '(Function)', 'href="FUNCTION.child_Vertex.html" title="Returns the child vertex of an edge.">'],
['Chunk Pool Allocator', '(Spec)', 'href="SPEC_Chunk+_Pool+_Allocator.html" title="Allocator that pools one or more consecutive memory blocks of a specific size.">'],
['Classes', '', '<a target=_parent href="INDEXPAGE_Class.html">'],
['clear', '(Function)', 'href="FUNCTION_Allocator_23clear.html" title="Deallocates all memory blocks.">'],
['clear', '(Function)', 'href="FUNCTION.clear.html" title="Resets an object.">'],
['clearEdges', '(Function)', 'href="FUNCTION.clear_Edges.html" title="Removes all edges in a graph.">'],
['clearGaps', '(Function)', 'href="FUNCTION.clear_Gaps.html" title="Remove blanks from a gapped sequence.">'],
['clearReads', '(Function)', 'href="FUNCTION.clear_Reads.html" title="Removes all reads from a fragment store.">'],
['clearVertices', '(Function)', 'href="FUNCTION.clear_Vertices.html" title="Removes all vertices in a graph.">'],
['clippedBeginPosition', '(Function)', 'href="FUNCTION.clipped_Begin_Position.html" title="Begin position of the source segment.">'],
['clippedEndPosition', '(Function)', 'href="FUNCTION.clipped_End_Position.html" title="Position of the end of the source segment.">'],
['close', '(Function)', 'href="FUNCTION.close.html" title="Closes a file.">'],
['CMode', '(Spec)', 'href="SPEC_C_Mode.html" title=" Represents the C (&quot;constant&quot;) computation scheme for handling &quot;zero&quot; probabilities.">'],
['col', '(Function)', 'href="FUNCTION.col.html" title="A column in an alignment.">'],
['Col', '(Metafunction)', 'href="METAFUNCTION_Col.html" title="Type of a column in an alignment.">'],
['collectLeaves', '(Function)', 'href="FUNCTION.collect_Leaves.html" title="Returns all leaves underneath a given vertex.">'],
['cols', '(Function)', 'href="FUNCTION.cols.html" title="The container of columns in an alignment.">'],
['Cols', '(Metafunction)', 'href="METAFUNCTION_Cols.html" title="Type of column container of an alignment.">'],
['CommandLineOption', '(Class)', 'href="CLASS_Command_Line_Option.html" title="Stores information for a specific command line option.">'],
['CommandLineOption', '(Memfunc)', 'href="MEMFUNC_Command_Line_Option_23_Command_Line_Option.html" title="Constructor">'],
['CommandLineParser', '(Class)', 'href="CLASS_Command_Line_Parser.html" title="Stores multiple Class.CommandLineOption objects and parses the command line arguments for these options.">'],
['CommandLineParser', '(Memfunc)', 'href="MEMFUNC_Command_Line_Parser_23_Command_Line_Parser.html" title="Constructor">'],
['compactAlignedReads', '(Function)', 'href="FUNCTION.compact_Aligned_Reads.html" title="Removes invalid aligned reads and rename alignId sequentially beginning with 0.">'],
['compactPairMatchIds', '(Function)', 'href="FUNCTION.compact_Pair_Match_Ids.html" title="Renames pairMatchId sequentially beginning with 0.">'],
['Comparator', '(Metafunction)', 'href="METAFUNCTION_Comparator.html" title="Type of comparator object">'],
['compare', '(Function)', 'href="FUNCTION.compare.html" title="Compares two objects.">'],
['CompareType', '(Metafunction)', 'href="METAFUNCTION_Compare_Type.html" title="Type to convert other types for comparisons.">'],
['complement', '(Function)', 'href="FUNCTION.complement.html" title="Complement a sequence or a Class.StringSet in-place.">'],
['completeProfile', '(Function)', 'href="FUNCTION.complete_Profile.html" title="Concatenates the background frequency with the profile for the motif component.">'],
['computeGenerousCapacity', '(Function)', 'href="FUNCTION.compute_Generous_Capacity.html" title="Capacity for generous expansion.">'],
['concat', '(Function)', 'href="FUNCTION.concat.html" title="Returns the concatenation sequence of all sequences in a Class.StringSet.">'],
['concat', '(Memvar)', 'href="MEMVAR_Concat_Direct_23concat.html" title="The concatenation string. Concatenates all sequences of the StringSet without gaps.">'],
['ConcatDirect', '(Spec)', 'href="SPEC_Concat_Direct.html" title="A string set storing the concatenation of all strings within one string.">'],
['Concatenator', '(Metafunction)', 'href="METAFUNCTION_Concatenator.html" title="Returns the type of the concatenation sequence of all sequences in a Class.StringSet.">'],
['ConcatenatorManyToOne', '(Class)', 'href="CLASS_Concatenator_Many_To_One.html" title="A sequence class that virtually concatenates all sequences in a Class.StringSet.">'],
['ConcatenatorManyToOne', '(Memfunc)', 'href="MEMFUNC_Concatenator_Many_To_One_23_Concatenator_Many_To_One.html" title="Constructor">'],
['ConcatVirtual Iterator', '(Spec)', 'href="SPEC_Concat_Virtual+_Iterator.html" title="Iterator that sequentially iterates through the elements of a Class.StringSet as if they were directly concatenated, cmp. Spec.ConcatDirect.">'],
['Concepts', '', '<a target=_parent href="INDEXPAGE_Concept.html">'],
['connectedComponents', '(Function)', 'href="FUNCTION.connected_Components.html" title="Decomposes an undirected graph into its connected components.">'],
['Consensus Calling', '(Tag)', 'href="TAG_Consensus+_Calling.html" title="A tag that specifies how to call the consensus.">'],
['Constraint Iterator', '(Demo)', 'href="DEMO_Constraint+_Iterator.html" title="Example for using node predicates on a deferred suffix tree.">'],
['Container', '(Concept)', 'href="CONCEPT_Container.html" title="Object that contains other objects.">'],
['container', '(Function)', 'href="FUNCTION.container.html" title="Container of an iterator.">'],
['Container', '(Metafunction)', 'href="METAFUNCTION_Container.html" title="Type of the container given an iterator.">'],
['ContigFile', '(Class)', 'href="CLASS_Contig_File.html" title="Represents a file containing contigs.">'],
['contigFileStore', '(Memvar)', 'href="MEMVAR_Fragment_Store_23contig_File_Store.html" title="String that maps from contigFileId to &lt;fileName, firstContigId>.">'],
['contigId', '(Memvar)', 'href="MEMVAR_Aligned_Read_Store_Element_23contig_Id.html" title="Refers to the contig in the Memvar.FragmentStore#contigStore the read is aligned with.">'],
['contigNameStore', '(Memvar)', 'href="MEMVAR_Fragment_Store_23contig_Name_Store.html" title="String that maps from contigId to contigName.">'],
['contigRows', '(Memvar)', 'href="MEMVAR_Aligned_Read_Layout_23contig_Rows.html" title="2-D multi-read layout">'],
['contigStore', '(Memvar)', 'href="MEMVAR_Fragment_Store_23contig_Store.html" title="String that maps from contigId to &lt;contigSeq, contigGaps, contigFileId>.">'],
['ContigStoreElement', '(Class)', 'href="CLASS_Contig_Store_Element.html" title="Represents a single contig.">'],
['ContigStoreElement', '(Memfunc)', 'href="MEMFUNC_Contig_Store_Element_23_Contig_Store_Element.html" title="Constructor">'],
['convert', '(Function)', 'href="FUNCTION.convert.html" title="Converts a value into another value.">'],
['Convert', '(Metafunction)', 'href="METAFUNCTION_Convert.html" title="Return type of a conversion.">'],
['convertAlignment', '(Function)', 'href="FUNCTION.convert_Alignment.html" title="Converts an alignment graph into an alignment matrix.">'],
['convertImpl', '(Function)', 'href="FUNCTION.convert_Impl.html" title="Implements Function.convert.">'],
['convertMatchesToGlobalAlignment', '(Function)', 'href="FUNCTION.convert_Matches_To_Global_Alignment.html" title="Converts all matches to a multiple global alignment in gap-space.">'],
['convertPairWiseToGlobalAlignment', '(Function)', 'href="FUNCTION.convert_Pair_Wise_To_Global_Alignment.html" title="Converts pair-wise alignments to a multiple global alignment.">'],
['convertPatternToProfile', '(Function)', 'href="FUNCTION.convert_Pattern_To_Profile.html" title="Converts a pattern into a profile which consists of a set of frequency distributions.">'],
['convertResidueToFrequencyDist', '(Function)', 'href="FUNCTION.convert_Residue_To_Frequency_Dist.html" title="Coverts a residue to a frequency distribution (profile).">'],
['convertSetOfPatternsToProfile', '(Function)', 'href="FUNCTION.convert_Set_Of_Patterns_To_Profile.html" title="Converts a set of sequence patterns into a profile.">'],
['countCharacters', '(Function)', 'href="FUNCTION.count_Characters.html" title="Count characters at a specific position in a gapped sequence.">'],
['countChildren', '(Function)', 'href="FUNCTION.count_Children.html" title="Count the number of children of a tree node.">'],
['Counter', '(Spec)', 'href="SPEC_Counter.html" title="Extends the input stream by a second field which enumerates the elements.">'],
['countGaps', '(Function)', 'href="FUNCTION.count_Gaps.html" title="Count blanks at a specific position in a gapped sequence.">'],
['Counting IdManager', '(Spec)', 'href="SPEC_Counting+_Id_Manager.html" title="Id Manager that just counts the number of ids in use.">'],
['countOccurrences', '(Function)', 'href="FUNCTION.count_Occurrences.html" title="Returns the number of occurences of Function.representative substring or a q-gram in the index text.">'],
['countOccurrencesMultiple', '(Function)', 'href="FUNCTION.count_Occurrences_Multiple.html" title="Returns the number of occurences of a q-gram for every sequence of a Class.StringSet .">'],
['cpuTime', '(Function)', 'href="FUNCTION.cpu_Time.html" title="Returns the cpu time in seconds.">'],
['create', '(Function)', 'href="FUNCTION.create.html" title="Makes an object to owner of its content.">'],
['createBWTable', '(Function)', 'href="FUNCTION.create_B_W_Table.html" title="Creates a Burrows-Wheeler table from a given text and suffix array.">'],
['createChildtab', '(Function)', 'href="FUNCTION.create_Childtab.html" title="Creates a child table from a given lcp table.">'],
['createCountArray', '(Function)', 'href="FUNCTION.create_Count_Array.html" title="Builds an index on a StringSet storing how often a q-gram occurs in each sequence.">'],
['createIntervalTree', '(Function)', 'href="FUNCTION.create_Interval_Tree.html" title="Create an interval tree.">'],
['createLcpTable', '(Function)', 'href="FUNCTION.create_Lcp_Table.html" title="Creates a lcp table from a given text and suffix array.">'],
['createOracle', '(Function)', 'href="FUNCTION.create_Oracle.html" title="Creates a factor oracle.">'],
['createOracleOnReverse', '(Function)', 'href="FUNCTION.create_Oracle_On_Reverse.html" title="Creates a factor oracle for the reversed string.">'],
['createQGramIndex', '(Function)', 'href="FUNCTION.create_Q_Gram_Index.html" title="Builds a q-gram index on a sequence.">'],
['createQGramIndexDirOnly', '(Function)', 'href="FUNCTION.create_Q_Gram_Index_Dir_Only.html" title="Builds the directory of a q-gram index on a sequence.">'],
['createQGramIndexSAOnly', '(Function)', 'href="FUNCTION.create_Q_Gram_Index_S_A_Only.html" title="Builds the suffix array of a q-gram index on a sequence.">'],
['createRoot', '(Function)', 'href="FUNCTION.create_Root.html" title="Creates the root in a tree or an automaton.">'],
['createSource', '(Function)', 'href="FUNCTION.create_Source.html" title="Creates a new source.">'],
['createSuffixArray', '(Function)', 'href="FUNCTION.create_Suffix_Array.html" title="Creates a suffix array from a given text.">'],
['createSuffixTrie', '(Function)', 'href="FUNCTION.create_Suffix_Trie.html" title="Creates a trie of all suffixes of a text.">'],
['createTrie', '(Function)', 'href="FUNCTION.create_Trie.html" title="Creates a trie.">'],
['createTrieOnReverse', '(Function)', 'href="FUNCTION.create_Trie_On_Reverse.html" title="Creates a trie for all reversed keywords.">'],
['createWotdIndex', '(Function)', 'href="FUNCTION.create_Wotd_Index.html" title="Builds a q-gram index on a sequence.">'],
['CStyle String', '(Spec)', 'href="SPEC_C_Style+_String.html" title="Allows adaption of strings to C-style strings.">'],
['dagShortestPath', '(Function)', 'href="FUNCTION.dag_Shortest_Path.html" title="Computes shortest paths from a single source in a directed acyclic graph (DAG).">'],
['databaseName', '(Function)', 'href="FUNCTION.database_Name.html" title="Reference to the name (identifier) of the database in a Blast report.">'],
['databaseOrientationPlus', '(Function)', 'href="FUNCTION.database_Orientation_Plus.html" title="Orientation of the database sequence within a Blast HSP alignment.">'],
['dddoc', '(Page)', 'href="PAGE.dddoc.html" title="The documentation system &quot;dot-dot-doc&quot;.">'],
['deallocate', '(Function)', 'href="FUNCTION.deallocate.html" title="Deallocates memory.">'],
['DeepestSpec', '(Metafunction)', 'href="METAFUNCTION_Deepest_Spec.html" title="The deepest spec of a class with nested template arguments.">'],
['Default', '(Tag)', 'href="TAG_Default.html" title="Tag that specifies default behavior.">'],
['DefaultFindBeginPatternSpec', '(Metafunction)', 'href="METAFUNCTION_Default_Find_Begin_Pattern_Spec.html" title="Type of the default findBegin pattern specialization, given a score.">'],
['DefaultFinder', '(Metafunction)', 'href="METAFUNCTION_Default_Finder.html" title="Default Class.Finder specialization type.">'],
['DefaultGetIteratorSpec', '(Metafunction)', 'href="METAFUNCTION_Default_Get_Iterator_Spec.html" title="Specifies default kind of iterator returned by functions.">'],
['DefaultIndexCreator', '(Metafunction)', 'href="METAFUNCTION_Default_Index_Creator.html" title="Default algorithm to create a demanded and not yet existing Metafunction.Fibre.">'],
['DefaultIndexSpec', '(Metafunction)', 'href="METAFUNCTION_Default_Index_Spec.html" title="Default Class.Index specialization type.">'],
['DefaultIndexStringSpec', '(Metafunction)', 'href="METAFUNCTION_Default_Index_String_Spec.html" title="Default Class.String specialization type of the Metafunction.Fibre of an Class.Index.">'],
['DefaultIteratorSpec', '(Metafunction)', 'href="METAFUNCTION_Default_Iterator_Spec.html" title="Specifies default kind of iterator.">'],
['DefaultOverflowExplicit', '(Metafunction)', 'href="METAFUNCTION_Default_Overflow_Explicit.html" title="The default overflow strategy for explicit resize.">'],
['DefaultOverflowImplicit', '(Metafunction)', 'href="METAFUNCTION_Default_Overflow_Implicit.html" title="The default overflow strategy for implicit resize.">'],
['DefaultPattern', '(Metafunction)', 'href="METAFUNCTION_Default_Pattern.html" title="Default Class.Pattern specialization type.">'],
['DefaultPrefixOrder', '(Metafunction)', 'href="METAFUNCTION_Default_Prefix_Order.html" title="The default prefix order.">'],
['degree', '(Function)', 'href="FUNCTION.degree.html" title="Number of incident edges for a given vertex.">'],
['dependent', '(Function)', 'href="FUNCTION.dependent.html" title="Test whether object depends on other objects.">'],
['Dependent', '(Spec)', 'href="SPEC_Dependent.html" title="A string set storing references of the strings.">'],
['dependentSource', '(Function)', 'href="FUNCTION.dependent_Source.html" title="Test if object depends from it\'s source.">'],
['Depth-First Search', '(Demo)', 'href="DEMO_Depth-_First+_Search.html" title=" Depth-first search through a graph.">'],
['depthFirstSearch', '(Function)', 'href="FUNCTION.depth_First_Search.html" title="Implements a depth-first search on a graph.">'],
['Dequeue', '(Class)', 'href="CLASS_Dequeue.html" title="A double-ended queue implementation on top of a Class.String.">'],
['detach', '(Function)', 'href="FUNCTION.detach.html" title="Makes an object independent from other objects.">'],
['determineConsensusSeq', '(Function)', 'href="FUNCTION.determine_Consensus_Seq.html" title="Determines the consensus pattern of a given profile.">'],
['Dfs Preorder Iterator', '(Spec)', 'href="SPEC_Dfs+_Preorder+_Iterator.html" title="Depth-first search iterator for Class.Graph.">'],
['difference', '(Function)', 'href="FUNCTION.difference.html" title="The difference between two iterators.">'],
['Difference', '(Metafunction)', 'href="METAFUNCTION_Difference.html" title="Type of an object that stores the difference between two iterators.">'],
['dijkstra', '(Function)', 'href="FUNCTION.dijkstra.html" title="Computes shortest paths from a single source in a graph.">'],
['Dijkstras Algorithm', '(Demo)', 'href="DEMO_Dijkstras+_Algorithm.html" title="Computing single source shortest paths using Dijkstra algorithm.">'],
['dimension', '(Function)', 'href="FUNCTION.dimension.html" title="Dimension of a seed.">'],
['dirAt', '(Function)', 'href="FUNCTION.dir_At.html" title="Shortcut for value(indexDir(..), ..).">'],
['Directed Graph', '(Spec)', 'href="SPEC_Directed+_Graph.html" title="A directed graph that stores the edges in an adjacency list.">'],
['display', '(Function)', 'href="FUNCTION.display.html" title="Displays a given set of strings.">'],
['displayResult', '(Function)', 'href="FUNCTION.display_Result.html" title="Displays all found motif candidates. In the case of the Projection Motif Finder           the function displays the consensus pattern of the found motif candidate.">'],
['Distance Calculation', '(Tag)', 'href="TAG_Distance+_Calculation.html" title="A tag to specify how to calculate distance matrices.">'],
['Dna', '(Spec)', 'href="SPEC_Dna.html" title="Alphabet for DNA.">'],
['Dna5', '(Spec)', 'href="SPEC_Dna5.html" title="Alphabet for DNA including \'N\' character.">'],
['Dna5Iterator', '(Shortcut)', 'href="SHORTCUT_Dna5_Iterator.html" title="Iterator for Shortcut.Dna5String.">'],
['Dna5Q', '(Spec)', 'href="SPEC_Dna5_Q.html" title="Alphabet for DNA plus phred quality including \'N\' character.">'],
['Dna5String', '(Shortcut)', 'href="SHORTCUT_Dna5_String.html" title="A string of Spec.Dna5.">'],
['Dna5StringComplement', '(Shortcut)', 'href="SHORTCUT_Dna5_String_Complement.html" title="Modifier for the complement of a Shortcut.Dna5String.">'],
['Dna5StringReverse', '(Shortcut)', 'href="SHORTCUT_Dna5_String_Reverse.html" title="Modifier for the reverse of a Shortcut.Dna5String.">'],
['Dna5StringReverseComplement', '(Shortcut)', 'href="SHORTCUT_Dna5_String_Reverse_Complement.html" title="Modifier for the reverse complement of a Shortcut.Dna5String.">'],
['DnaIterator', '(Shortcut)', 'href="SHORTCUT_Dna_Iterator.html" title="Iterator for Shortcut.DnaString.">'],
['DnaQ', '(Spec)', 'href="SPEC_Dna_Q.html" title="Alphabet for DNA plus phred quality.">'],
['DnaString', '(Shortcut)', 'href="SHORTCUT_Dna_String.html" title="A string of Spec.Dna.">'],
['DnaStringComplement', '(Shortcut)', 'href="SHORTCUT_Dna_String_Complement.html" title="Modifier for the complement of a Shortcut.DnaString.">'],
['DnaStringReverse', '(Shortcut)', 'href="SHORTCUT_Dna_String_Reverse.html" title="Modifier for the reverse of a Shortcut.DnaString.">'],
['DnaStringReverseComplement', '(Shortcut)', 'href="SHORTCUT_Dna_String_Reverse_Complement.html" title="Modifier for the reverse complement of a Shortcut.DnaString.">'],
['DotDrawing', '(Tag)', 'href="TAG_Dot_Drawing.html" title="Switch to trigger drawing in dot format.">'],
['DPSearch', '(Spec)', 'href="SPEC_D_P_Search.html" title="A dynamic programming algorithm for approximate string-matching with a user-definable scoring function.">'],
['Echoer', '(Spec)', 'href="SPEC_Echoer.html" title="Outputs tuples of the echoRepeats last elements of the input stream.">'],
['Edge Iterator', '(Spec)', 'href="SPEC_Edge+_Iterator.html" title="Edge iterator for Class.Graph.">'],
['EdgeDescriptor', '(Metafunction)', 'href="METAFUNCTION_Edge_Descriptor.html" title="Type of an object that represents an edge descriptor.">'],
['EdgeIdHandler', '(Metafunction)', 'href="METAFUNCTION_Edge_Id_Handler.html" title="Type of an object that represents an Id Manager.">'],
['EdgeStump', '(Class)', 'href="CLASS_Edge_Stump.html" title="The EdgeStump class encapsulates a single edge. It represents either a list node in the adjacency list of a graph or an array field if edges are stored in an array.">'],
['EdgeType', '(Metafunction)', 'href="METAFUNCTION_Edge_Type.html" title="Edge type of a graph object.">'],
['EditDistance', '(Spec)', 'href="SPEC_Edit_Distance.html" title="Edit distance scoring scheme.">'],
['EditDistanceScore', '(Shortcut)', 'href="SHORTCUT_Edit_Distance_Score.html" title="Edit distance scoring scheme.">'],
['EditEnvironment', '(Spec)', 'href="SPEC_Edit_Environment.html" title="Outputs tuples of the tupleLen consecutive elements of the input stream.">'],
['em', '(Function)', 'href="FUNCTION.em.html" title="Represents the EM algorithm as used by MEME.">'],
['emissionProbability', '(Function)', 'href="FUNCTION.emission_Probability.html" title="Returns a reference to the emission probability.">'],
['emittedProbability', '(Memfunc)', 'href="MEMFUNC_Markov_Model_23emitted_Probability.html" title="Computes the probability that a string (or a set of strings) is emitted by the MarkovModel.">'],
['empty', '(Function)', 'href="FUNCTION.empty.html" title="Test a container for being empty.">'],
['EmptyEdges', '(Tag)', 'href="TAG_Empty_Edges.html" title="Consider a suffix tree with leaves for every suffix.">'],
['emptyParentEdge', '(Function)', 'href="FUNCTION.empty_Parent_Edge.html" title="Returns true iff the edge label from the iterator node to its parent is empty.">'],
['emptySource', '(Function)', 'href="FUNCTION.empty_Source.html" title="Test if there is a source.">'],
['end', '(Function)', 'href="FUNCTION.end.html" title="The end of a container.">'],
['endDiagonal', '(Function)', 'href="FUNCTION.end_Diagonal.html" title=" Returns the diagonal of the end point.">'],
['endPos', '(Memvar)', 'href="MEMVAR_Aligned_Read_Store_Element_23end_Pos.html" title="End position of the alignment in gap-space.">'],
['endPosition', '(Function)', 'href="FUNCTION.end_Position.html" title="End position of object in host.">'],
['endRead', '(Function)', 'href="FUNCTION.end_Read.html" title="Terminates a read process.">'],
['endState', '(Function)', 'href="FUNCTION.end_State.html" title="Returns a reference to the end state.">'],
['endWrite', '(Function)', 'href="FUNCTION.end_Write.html" title="Terminates a write process.">'],
['EPatternBranching', '(Spec)', 'href="SPEC_E_Pattern_Branching.html" title=" Represents the ePatternBranching algorithm of Davila and Rajasekaran.">'],
['erase', '(Function)', 'href="FUNCTION.erase.html" title="Erases a part of a container">'],
['erase', '(Function)', 'href="FUNCTION.map_23erase.html" title="Removes a value from a map.">'],
['eraseAll', '(Function)', 'href="FUNCTION.map_23erase_All.html" title="Removes a value from a map.">'],
['eraseBack', '(Function)', 'href="FUNCTION.erase_Back.html" title="Deletes the last item of a container and reduces its size by 1.  The container must have a size greater than or equal to 1.">'],
['errors', '(Memvar)', 'href="MEMVAR_Align_Quality_Store_Element_23errors.html" title="Absolute number of errors in the alignment.">'],
['ESA Index Fibres', '(Tag)', 'href="TAG_E_S_A+_Index+_Fibres.html" title="Tag to select a specific fibre (e.g. table, object, ...) of an Spec.IndexEsa.ESA index.">'],
['Exact Searching', '(Demo)', 'href="DEMO_Exact+_Searching.html" title="Exact string matching.">'],
['ExactFragment', '(Spec)', 'href="SPEC_Exact_Fragment.html" title="A type for ungapped, pairwise segment matches.">'],
['ExactReversableFragment', '(Spec)', 'href="SPEC_Exact_Reversable_Fragment.html" title="A type for ungapped, pairwise segment matches that may be in reverse orientation.">'],
['Examples', '', '<a target=_parent href="INDEXPAGE_Demo.html">'],
['expectation', '(Function)', 'href="FUNCTION.expectation.html" title="Computes the expectation for a set of patterns w.r.t. a set of text strings and a MarkovModel">'],
['extendSeed', '(Function)', 'href="FUNCTION.extend_Seed.html" title="Extends a seed.">'],
['extendSeeds', '(Function)', 'href="FUNCTION.extend_Seeds.html" title=" Extension of seeds.">'],
['extendSeedScore', '(Function)', 'href="FUNCTION.extend_Seed_Score.html" title="Extends a seed and increases the score.">'],
['extendSeedsScore', '(Function)', 'href="FUNCTION.extend_Seeds_Score.html" title=" Extension of seeds with score calculation.">'],
['External Property Map', '(Class)', 'href="CLASS_External+_Property+_Map.html" title="An external property map.">'],
['External String', '(Spec)', 'href="SPEC_External+_String.html" title="String that is stored in external memory.">'],
['ExternalConfig', '(Tag)', 'href="TAG_External_Config.html" title="Standard configuration for the Spec.External String.">'],
['ExternalConfigLarge', '(Tag)', 'href="TAG_External_Config_Large.html" title="Large size type configuration for the Spec.External String.">'],
['ExternalConfigSize', '(Tag)', 'href="TAG_External_Config_Size.html" title="Arbitrary size type configuration for the Spec.External String.">'],
['factorial', '(Function)', 'href="FUNCTION.factorial.html" title="Calculates the factorial value of any integer number.">'],
['Fibre', '(Metafunction)', 'href="METAFUNCTION_Fibre.html" title="Type of a specific index member (fibre).">'],
['File', '(Class)', 'href="CLASS_File.html" title="Represents a file.">'],
['File Format', '(Tag)', 'href="TAG_File+_Format.html" title="A file format.">'],
['File Format I/O', '(Demo)', 'href="DEMO_File+_Format+_I_2f_O.html" title="Accessing sequence data in files.">'],
['File Reader String', '(Spec)', 'href="SPEC_File+_Reader+_String.html" title="Read sequence data from file.">'],
['fileBeginPos', '(Memvar)', 'href="MEMVAR_Contig_Store_Element_23file_Begin_Pos.html" title="Begin position of the contig sequence fragment in the file.">'],
['fileEndPos', '(Memvar)', 'href="MEMVAR_Contig_Store_Element_23file_End_Pos.html" title="End position of the contig sequence fragment in the file.">'],
['FileFormat', '(Class)', 'href="CLASS_File_Format.html" title="Object that stores a file format.">'],
['fileId', '(Memvar)', 'href="MEMVAR_Contig_Store_Element_23file_Id.html" title="Refers to a file in the Memvar.FragmentStore#contigFileStore or is INVALID_ID if the contig has no file association.">'],
['fileName', '(Memvar)', 'href="MEMVAR_Contig_File_23file_Name.html" title="Contig file name.">'],
['Filter', '(Spec)', 'href="SPEC_Filter.html" title="Applies a specific function to the input stream.">'],
['find', '(Function)', 'href="FUNCTION.find.html" title="Search for a Class.Pattern in a Class.Finder object.">'],
['find', '(Function)', 'href="FUNCTION.map_23find.html" title="Find a value in a map.">'],
['findBegin', '(Function)', 'href="FUNCTION.find_Begin.html" title="Search the begin of an approximate match.">'],
['findEdge', '(Function)', 'href="FUNCTION.find_Edge.html" title="Finds an edge.">'],
['Finder', '(Class)', 'href="CLASS_Finder.html" title="Holds the haystack and a current search context.">'],
['Finder', '(Concept)', 'href="CONCEPT_Finder.html" title="Object that stores information about the glos:haystack of a search and the current search position.">'],
['Finder', '(Memfunc)', 'href="MEMFUNC_Finder_23_Finder.html" title="Constructor">'],
['FindInfix', '(Tag)', 'href="TAG_Find_Infix.html" title="Find needle as a substring of haystack (infix search).">'],
['findIntervals', '(Function)', 'href="FUNCTION.find_Intervals.html" title="Find all intervals that contain the query point or overlap with the query interval.">'],
['findIntervalsExcludeTouching', '(Function)', 'href="FUNCTION.find_Intervals_Exclude_Touching.html" title=":Find all intervals that contain the query point, exclude intervals that touch the query, i.e. where the query point equals the start or end point.">'],
['findMotif', '(Function)', 'href="FUNCTION.find_Motif.html" title="Represents the main function which is used to start the search for noticeable motif patterns.">'],
['FindPrefix', '(Tag)', 'href="TAG_Find_Prefix.html" title="Find needle as a prefix of the haystack (prefix serach)">'],
['findVertex', '(Function)', 'href="FUNCTION.find_Vertex.html" title="Finds a vertex given a sequence id and a position.">'],
['Finite', '(Spec)', 'href="SPEC_Finite.html" title="A finite alphabet of a fixed size.">'],
['firstContigId', '(Memvar)', 'href="MEMVAR_Contig_File_23first_Contig_Id.html" title="The contigId of the first sequence in the file. Subsequent contig sequences have an increasing contigId.">'],
['flatten', '(Function)', 'href="FUNCTION.flatten.html" title="Apply the journal to the underlying string, destructively on the underlying string.">'],
['Floyd-Warshall Algorithm', '(Demo)', 'href="DEMO_Floyd-_Warshall+_Algorithm.html" title="Computing all-pairs shortest paths using Floyd-Warshall algorithm.">'],
['floydWarshallAlgorithm', '(Function)', 'href="FUNCTION.floyd_Warshall_Algorithm.html" title="Finds shortest paths between all pairs of vertices in a graph.">'],
['flush', '(Function)', 'href="FUNCTION.flush.html" title="Waits for all open requests to complete.">'],
['fordFulkersonAlgorithm', '(Function)', 'href="FUNCTION.ford_Fulkerson_Algorithm.html" title="Computes a maximum flow in a directed graph.">'],
['format', '(Memvar)', 'href="MEMVAR_Contig_File_23format.html" title="Stores the contig file format, auto-detected in Function.loadContigs.">'],
['forwardAlgorithm', '(Function)', 'href="FUNCTION.forward_Algorithm.html" title="Implements the forward algorithm.">'],
['Fragment', '(Class)', 'href="CLASS_Fragment.html" title="A type for ungapped, pairwise segment matches.">'],
['Fragment', '(Memfunc)', 'href="MEMFUNC_Fragment_23_Fragment.html" title="Constructor.">'],
['fragmentBegin', '(Function)', 'href="FUNCTION.fragment_Begin.html" title="Gets the begin position for this fragment or this vertex descriptor in the sequence.">'],
['fragmentLength', '(Function)', 'href="FUNCTION.fragment_Length.html" title="Gets the length of the label of a given vertex descriptor in the sequence.">'],
['FragmentStore', '(Class)', 'href="CLASS_Fragment_Store.html" title="Multi-Container to store contigs, reads and a multiple alignment between them.">'],
['FrequencyDistribution', '(Class)', 'href="CLASS_Frequency_Distribution.html" title="Holds a collection of objects of a specific type, where each object represents           the frequency (absolute or relative probability) of a particular residue which is a member     of a fixed sequence alphabet.">'],
['front', '(Function)', 'href="FUNCTION_Pipelining_23front.html" title="Gets the first element of the remaining stream.">'],
['front', '(Function)', 'href="FUNCTION.front.html" title="The first item in container.">'],
['FullInfo', '(Spec)', 'href="SPEC_Full_Info.html" title="Stores all pieces of information delivered with an alignment in a Blast report.">'],
['Functions', '', '<a target=_parent href="INDEXPAGE_Function.html">'],
['FunctorComplement', '(Class)', 'href="CLASS_Functor_Complement.html" title="Functor that returns the complement nucleotide to a given nucleotide.">'],
['FunctorConvert', '(Class)', 'href="CLASS_Functor_Convert.html" title="Functor that converts a TInValue type to a TOutValue type character.">'],
['FunctorLowcase', '(Class)', 'href="CLASS_Functor_Lowcase.html" title="Functor that returns the lower case character to a given character.">'],
['FunctorUpcase', '(Class)', 'href="CLASS_Functor_Upcase.html" title="Functor that returns the upper case character to a given character.">'],
['GapAnchor', '(Class)', 'href="CLASS_Gap_Anchor.html" title="Stores the position of an alignment character in sequence-space and in gap-space.">'],
['GapAnchor', '(Memfunc)', 'href="MEMFUNC_Gap_Anchor_23_Gap_Anchor.html" title="Constructor">'],
['GappedShape', '(Spec)', 'href="SPEC_Gapped_Shape.html" title="A fixed gapped shape.">'],
['GappedValueType', '(Metafunction)', 'href="METAFUNCTION_Gapped_Value_Type.html" title="Returns a value type that contains a blank value \'-\'.">'],
['gapPos', '(Memvar)', 'href="MEMVAR_Gap_Anchor_23gap_Pos.html" title="Sequence character position in the gapped sequence.">'],
['Gaps', '(Class)', 'href="CLASS_Gaps.html" title="Stores the gaps in a gapped sequences.">'],
['Gaps', '(Memfunc)', 'href="MEMFUNC_Gaps_23_Gaps.html" title="Constructor">'],
['gaps', '(Memvar)', 'href="MEMVAR_Aligned_Read_Store_Element_23gaps.html" title="String of read gap anchors. Can be used to create a Spec.AnchorGaps alignment row.">'],
['gaps', '(Memvar)', 'href="MEMVAR_Contig_Store_Element_23gaps.html" title="String of contig gap anchors. Can be used to create a Spec.AnchorGaps alignment row.">'],
['gapValue', '(Function)', 'href="FUNCTION.gap_Value.html" title="Returns reference to a value that is used as gap character.">'],
['gapValueImpl', '(Function)', 'href="FUNCTION.gap_Value_Impl.html" title="Implements Function.gapValue.">'],
['generateSequence', '(Function)', 'href="FUNCTION.generate_Sequence.html" title="Generates random state and alphabet sequences of a given HMM.">'],
['GenericShape', '(Spec)', 'href="SPEC_Generic_Shape.html" title="A variable gapped shape.">'],
['Geometric Pdf', '(Spec)', 'href="SPEC_Geometric+_Pdf.html" title="Geometric probability density function with p=0.5.   This can be implemented efficiently not using any floating point arithmetics. Just bit operations are needed.">'],
['getAdjacencyMatrix', '(Function)', 'href="FUNCTION.get_Adjacency_Matrix.html" title="Returns an adjacency matrix representation of the graph.">'],
['getAlignment', '(Function)', 'href="FUNCTION.blast_23get_Alignment.html" title="Turns a HSP from a Blast search into an Alignment object.">'],
['getAlignment', '(Function)', 'href="FUNCTION.get_Alignment.html" title=" Constructs a alignment from a Spec.ChainedSeed.">'],
['getArgumentValue', '(Function)', 'href="FUNCTION.get_Argument_Value.html" title="Returns an argument set on the command line.">'],
['getArgumentValues', '(Function)', 'href="FUNCTION.get_Argument_Values.html" title="Returns all arguments set on the command line.">'],
['getBeginScore', '(Function)', 'href="FUNCTION.get_Begin_Score.html" title="Score of the last match found by Function.findBegin during approximate searching.">'],
['getBeginState', '(Function)', 'href="FUNCTION.get_Begin_State.html" title="Returns the begin state.">'],
['getBitScore', '(Function)', 'href="FUNCTION.get_Bit_Score.html" title="The bit score associated with a Blast HSP.">'],
['getBlastMatchScore', '(Function)', 'href="FUNCTION_Blast_23get_Blast_Match_Score.html" title="The Smith-Waterman score associated with a Blast HSP.">'],
['getCargo', '(Function)', 'href="FUNCTION.get_Cargo.html" title="Get method for the edge cargo.">'],
['getDatabaseBegin', '(Function)', 'href="FUNCTION.get_Database_Begin.html" title="The begin position of the HSP on the database sequence.">'],
['getDatabaseEnd', '(Function)', 'href="FUNCTION.get_Database_End.html" title="The end position of the HSP on the database sequence.">'],
['getDatabaseName', '(Function)', 'href="FUNCTION.get_Database_Name.html" title="The name (identifier) of the database in a Blast report.">'],
['getDistanceMatrix', '(Function)', 'href="FUNCTION.get_Distance_Matrix.html" title="Computes a pairwise distance matrix from an alignment graph.">'],
['getEmissionProbability', '(Function)', 'href="FUNCTION.get_Emission_Probability.html" title="Returns the emission probability.">'],
['getEndState', '(Function)', 'href="FUNCTION.get_End_State.html" title="Returns the end state.">'],
['getEValue', '(Function)', 'href="FUNCTION.get_E_Value.html" title="The e-value associated with a Blast HSP.">'],
['getEValueCutoff', '(Function)', 'href="FUNCTION.get_E_Value_Cutoff.html" title="The Expect-Value cutoff parsed from a Blast report.">'],
['getFibre', '(Function)', 'href="FUNCTION.get_Fibre.html" title="Returns a specific Metafunction.Fibre of an Class.Index object.">'],
['getFirstCoveredPosition', '(Function)', 'href="FUNCTION.get_First_Covered_Position.html" title="Finds the first position in a sequence that is not assigned to a nil vertex.">'],
['getFrequency', '(Function)', 'href="FUNCTION.get_Frequency.html" title="Returns the number of sequences, which contain the Function.representative as a substring.">'],
['getGappedKappa', '(Function)', 'href="FUNCTION.get_Gapped_Kappa.html" title="The gapped kappa value parsed from a Blast report.">'],
['getGappedLambda', '(Function)', 'href="FUNCTION.get_Gapped_Lambda.html" title="The lambda value parsed from a Blast report.">'],
['getGetExtension', '(Function)', 'href="FUNCTION.get_Get_Extension.html" title="The gap extension penalty parsed from a Blast report.">'],
['getGetOpen', '(Function)', 'href="FUNCTION.get_Get_Open.html" title="The gap open penalty parsed from a Blast report.">'],
['getIdByName', '(Function)', 'href="FUNCTION.get_Id_By_Name.html" title="Appends a name to a name store.">'],
['getIdLowerBound', '(Function)', 'href="FUNCTION.get_Id_Lower_Bound.html" title="Returns the smallest distributed id. That is, the return value is guaranteed to be the smallest id obtained so far.">'],
['getIdUpperBound', '(Function)', 'href="FUNCTION.get_Id_Upper_Bound.html" title="Returns the largest distributed id plus 1. That is, the return value is guaranteed to be an upper bound on all distributed ids.">'],
['getKappa', '(Function)', 'href="FUNCTION.get_Kappa.html" title="The kappa value parsed from a Blast report.">'],
['getKmerSimilarityMatrix', '(Function)', 'href="FUNCTION.get_Kmer_Similarity_Matrix.html" title="Creates a matrix storing the number of common q-grams between all pairs of sequences.">'],
['getLambda', '(Function)', 'href="FUNCTION.get_Lambda.html" title="The lambda value parsed from a Blast report.">'],
['getLastCoveredPosition', '(Function)', 'href="FUNCTION.get_Last_Covered_Position.html" title="Finds the last position in a sequence that is not assigned to a nil vertex.">'],
['getLeftBoundary', '(Function)', 'href="FUNCTION.get_Left_Boundary.html" title="Get method for the left boundary.">'],
['getMateNo', '(Function)', 'href="FUNCTION.get_Mate_No.html" title="Returns the mate number of read for a given readId.">'],
['getMotif', '(Function)', 'href="FUNCTION.get_Motif.html" title="Gets the motif out of a Class.MotifFinder.  If pos is given, the pos-th motif is returned, otherwise the first motif is returned.">'],
['getNext', '(Function)', 'href="FUNCTION.get_Next.html" title="Get next Blast report from a file containing multiple Blast reports.">'],
['getNextS', '(Function)', 'href="FUNCTION.get_Next_S.html" title="Get method for the next source pointer.">'],
['getNextT', '(Function)', 'href="FUNCTION.get_Next_T.html" title="Get method for the next target pointer.">'],
['getNil', '(Function)', 'href="FUNCTION.get_Nil.html" title="Utility function returning a value that represents nil. Useful for various graph algorithms, e.g., missing predecessors, vertices that have not been visited, etc.">'],
['getNumGaps', '(Function)', 'href="FUNCTION.get_Num_Gaps.html" title="The number of gaps within a Blast HSP alignment.">'],
['getOccurrence', '(Function)', 'href="FUNCTION.get_Occurrence.html" title="Returns an occurence of the Function.representative substring or a q-gram in the index text.">'],
['getOccurrences', '(Function)', 'href="FUNCTION.get_Occurrences.html" title="Returns all occurences of the Function.representative substring or a q-gram in the index text.">'],
['getOccurrencesBwt', '(Function)', 'href="FUNCTION.get_Occurrences_Bwt.html" title="Returns the characters left beside all occurence of the Function.representative substring in the index text.">'],
['getOptionValueLong', '(Function)', 'href="FUNCTION.get_Option_Value_Long.html" title="Retrieves the value of a long-name option given on the command line.">'],
['getOptionValueShort', '(Function)', 'href="FUNCTION.get_Option_Value_Short.html" title="Retrieves the value of a short-name option given on the command line.">'],
['getOptionValuesLong', '(Function)', 'href="FUNCTION.get_Option_Values_Long.html" title="Returns all values of a long-name option given on the command line.">'],
['getOptionValuesShort', '(Function)', 'href="FUNCTION.get_Option_Values_Short.html" title="Returns all values of a short-name option given on the command line.">'],
['getProjectedPosition', '(Function)', 'href="FUNCTION.get_Projected_Position.html" title="Projects a position of one sequence taking part in a pairwise match onto the other sequence.">'],
['getProperty', '(Function)', 'href="FUNCTION.get_Property.html" title="Get method for an item\'s property.">'],
['getQueryBegin', '(Function)', 'href="FUNCTION.get_Query_Begin.html" title="The begin position of the HSP on the query sequence.">'],
['getQueryEnd', '(Function)', 'href="FUNCTION.get_Query_End.html" title="The end position of the HSP on the query sequence.">'],
['getQueryName', '(Function)', 'href="FUNCTION.get_Query_Name.html" title="The name (identifier) of the query in a Blast report.">'],
['getRead', '(Function)', 'href="FUNCTION.get_Read.html" title="Returns the read with the given readId.">'],
['getRightBoundary', '(Function)', 'href="FUNCTION.get_Right_Boundary.html" title="Get method for the right boundary.">'],
['getRoot', '(Function)', 'href="FUNCTION.get_Root.html" title="Get method for the root of a tree or an automaton.">'],
['getScore', '(Function)', 'href="FUNCTION.get_Score.html" title="Score of the last found match in approximate searching.">'],
['getSeqNo', '(Function)', 'href="FUNCTION.get_Seq_No.html" title="Returns the sequence number of a position.">'],
['getSeqOffset', '(Function)', 'href="FUNCTION.get_Seq_Offset.html" title="Returns the local sequence offset of a position.">'],
['getSource', '(Function)', 'href="FUNCTION.get_Source.html" title="Get method for the source.">'],
['GetSource', '(Metafunction)', 'href="METAFUNCTION_Get_Source.html" title="The type returned by the Function.source function.">'],
['getStepSize', '(Function)', 'href="FUNCTION.get_Step_Size.html" title="Return the q-gram step size used for index creation.">'],
['getStringSet', '(Function)', 'href="FUNCTION.get_String_Set.html" title="Gets the string set of an alignment graph.">'],
['getSuccessor', '(Function)', 'href="FUNCTION.get_Successor.html" title="Gets the successor for a given vertex and an edge label. For an automaton a single character is required whereas for a word graph getSuccessor takes a string.">'],
['getSwiftHits', '(Function)', 'href="FUNCTION.get_Swift_Hits.html" title="Gets the string of hits from the finder">'],
['getTarget', '(Function)', 'href="FUNCTION.get_Target.html" title="Get method for the target.">'],
['getTransitionProbability', '(Function)', 'href="FUNCTION.get_Transition_Probability.html" title="Returns the transition probability.">'],
['getValue', '(Function)', 'href="FUNCTION.get_Value.html" title="Access to the value.">'],
['GetValue', '(Metafunction)', 'href="METAFUNCTION_Get_Value.html" title="Type for reading values.">'],
['getValueById', '(Function)', 'href="FUNCTION.get_Value_By_Id.html" title="Retrieves a string from the StringSet given an id.">'],
['GetVSTreeIteratorTraits', '(Metafunction)', 'href="METAFUNCTION_Get_V_S_Tree_Iterator_Traits.html" title="Default behaviour of Function.goNext when no second parameter is given.">'],
['Global Alignment Algorithms', '(Tag)', 'href="TAG_Global+_Alignment+_Algorithms.html" title="Global alignment algorithm used by globalAlignment.">'],
['Global Alignments', '(Demo)', 'href="DEMO_Global+_Alignments.html" title="Computing an optimal global alignment between two sequences.">'],
['globalAlignment', '(Function)', 'href="FUNCTION.global_Alignment.html" title="Computes the best global alignment of the two sequences.">'],
['globalChaining', '(Function)', 'href="FUNCTION.global_Chaining.html" title="Computes the chain on a set of fragments.">'],
['globalMsaAlignment', '(Function)', 'href="FUNCTION.global_Msa_Alignment.html" title="Computes a global multiple alignment.">'],
['Glossary', '(Page)', 'href="PAGE_Glossary.html" title="List of terms used in SeqAn">'],
['goBegin', '(Function)', 'href="FUNCTION.go_Begin.html" title="Iterates to the first position of a container.">'],
['goDown', '(Function)', 'href="FUNCTION.go_Down.html" title="Iterates down one edge or a path in a tree.">'],
['goEnd', '(Function)', 'href="FUNCTION.go_End.html" title="Iterates to the last position of a container.">'],
['goFurther', '(Function)', 'href="FUNCTION.go_Further.html" title="Iterates some steps further.">'],
['goNext', '(Function)', 'href="FUNCTION.go_Next.html" title="Iterates to next position.">'],
['goNil', '(Function)', 'href="FUNCTION.go_Nil.html" title="Moves iterator to nil position.">'],
['goPrevious', '(Function)', 'href="FUNCTION.go_Previous.html" title="Iterates to pevious position.">'],
['goRight', '(Function)', 'href="FUNCTION.go_Right.html" title="Iterates to the next sibling in a tree.">'],
['goRoot', '(Function)', 'href="FUNCTION.go_Root.html" title="Move iterator to the root node.">'],
['goUp', '(Function)', 'href="FUNCTION.go_Up.html" title="Iterates up one edge to the parent in a tree.">'],
['Graph', '(Class)', 'href="CLASS_Graph.html" title="Generic graph.">'],
['Graph Iterator', '(Tag)', 'href="TAG_Graph+_Iterator.html" title="A specification of the iterator to traverse a graph.">'],
['guessFileFormat', '(Function)', 'href="FUNCTION.guess_File_Format.html" title="Tries to determine the format of a file.">'],
['guessFormat', '(Function)', 'href="FUNCTION.guess_Format.html" title="Guesses a file format from the contents of a sequence file.">'],
['guessFormatFromFilename', '(Function)', 'href="FUNCTION.guess_Format_From_Filename.html" title="Guesses a file format from a sequence file name.">'],
['hammingDistance', '(Function)', 'href="FUNCTION.hamming_Distance.html" title="Determines the Hamming distance between two sequences.">'],
['HammingDistance', '(Tag)', 'href="TAG_Hamming_Distance.html" title="Switch to trigger Hamming distance, which is a measure of character substitutions.">'],
['HammingSimpleFinder', '(Spec)', 'href="SPEC_Hamming_Simple_Finder.html" title="A brute force online searching algorithm for approximate string matching with hamming distance.">'],
['HardwiredShape', '(Class)', 'href="CLASS_Hardwired_Shape.html" title="A structure to define a fixed gapped shape.">'],
['hash', '(Function)', 'href="FUNCTION.hash.html" title="Computes a (lower) hash value for a shape applied to a sequence.">'],
['hash2', '(Function)', 'href="FUNCTION.hash2.html" title="Computes an unique hash value of a shape applied to a sequence, even if the sequence is shorter than the shape span">'],
['hash2Next', '(Function)', 'href="FUNCTION.hash2_Next.html" title="Computes a unique hash value for the adjacent shape, even if it is shorter than q.">'],
['hash2Upper', '(Function)', 'href="FUNCTION.hash2_Upper.html" title="Computes an upper unique hash value of a shape applied to a sequence, even if the sequence is shorter than the shape span.">'],
['hashNext', '(Function)', 'href="FUNCTION.hash_Next.html" title="Computes the hash value for the adjacent shape.">'],
['hashUpper', '(Function)', 'href="FUNCTION.hash_Upper.html" title="Computes an upper hash value for a shape applied to a sequence.">'],
['hasKey', '(Function)', 'href="FUNCTION.map_23has_Key.html" title="Determines whether a map contains a value given key.">'],
['hasOptionLong', '(Function)', 'href="FUNCTION.has_Option_Long.html" title="Returns whether a certain long-name option is registered in the parser.">'],
['hasOptionShort', '(Function)', 'href="FUNCTION.has_Option_Short.html" title="Returns whether a certain short-name option is registered in the parser.">'],
['hasPrefix', '(Function)', 'href="FUNCTION.has_Prefix.html" title="Test whether a sequence is prefix of another sequence.">'],
['haystack', '(Function)', 'href="FUNCTION.haystack.html" title="Returns the haystack of a Class.Finder object.">'],
['Haystack', '(Metafunction)', 'href="METAFUNCTION_Haystack.html" title="Returns the haystack type of a Class.Finder type.">'],
['Heaviest Increasing Subsequence', '(Demo)', 'href="DEMO_Heaviest+_Increasing+_Subsequence.html" title="Heaviest increasing subsequence code example">'],
['heaviestIncreasingSubsequence', '(Function)', 'href="FUNCTION.heaviest_Increasing_Subsequence.html" title="Computes the heaviest increasing subsequence.">'],
['help', '(Function)', 'href="FUNCTION.help.html" title="Prints the complete help message for the parser to a stream.">'],
['helpText', '(Function)', 'href="FUNCTION.help_Text.html" title="Returns the help text associated with the Class.CommandLineOption object.">'],
['HideEmptyEdges', '(Tag)', 'href="TAG_Hide_Empty_Edges.html" title="Consider a suffix tree with no empty edges (default behaviour).">'],
['Hierarchical', '(Spec)', 'href="SPEC_Hierarchical.html" title=" By using this Specialization the hierarchical verification is enabled.">'],
['Hit', '(Metafunction)', 'href="METAFUNCTION_Hit.html" title="Blast Hit type of a Blast object.">'],
['HitIterator', '(Spec)', 'href="SPEC_Hit_Iterator.html" title="Hit iterator for Class.BlastReport.">'],
['HMM', '(Demo)', 'href="DEMO_H_M_M.html" title="Hidden Markov Model code example">'],
['Hmm', '(Spec)', 'href="SPEC_Hmm.html" title="An Hmm is a directed graph with edges labeled with transition probabilities and emission profiles for each vertex. Vertices correspond to states in an HMM.">'],
['HMM Silent States', '(Demo)', 'href="DEMO_H_M_M+_Silent+_States.html" title="Hidden Markov Model with silent states code example">'],
['Holder', '(Class)', 'href="CLASS_Holder.html" title="Manages relationship to another object.">'],
['Holder', '(Memfunc)', 'href="MEMFUNC_Holder.html" title="Constructor">'],
['Horspool', '(Spec)', 'href="SPEC_Horspool.html" title=" Exact string matching using Horspool\'s algorithm (1980).">'],
['host', '(Function)', 'href="FUNCTION.host.html" title="The object a given object depends on.">'],
['Host', '(Metafunction)', 'href="METAFUNCTION_Host.html" title="Type of the object a given object depends on.">'],
['hostGraph', '(Function)', 'href="FUNCTION.host_Graph.html" title="The graph this iterator is working on.">'],
['hostHit', '(Function)', 'href="FUNCTION.host_Hit.html" title="The BlastHit this iterator is working on.">'],
['hostReport', '(Function)', 'href="FUNCTION.host_Report.html" title="The BlastReport this iterator is working on.">'],
['Hsp', '(Metafunction)', 'href="METAFUNCTION_Hsp.html" title="Blast HSP type of a Blast object.">'],
['HspIterator', '(Spec)', 'href="SPEC_Hsp_Iterator.html" title="Hsp iterator for Class.BlastHit.">'],
['i1', '(Memvar)', 'href="MEMVAR_Interval_And_Cargo_23i1.html" title="The first element in the interval of type i1.">'],
['i1', '(Memvar)', 'href="MEMVAR_Pair_23i1.html" title="T1 object">'],
['i1', '(Memvar)', 'href="MEMVAR_Triple_23i1.html" title="T1 object">'],
['i2', '(Memvar)', 'href="MEMVAR_Interval_And_Cargo_23i2.html" title="The last element in the interval of type i2.">'],
['i2', '(Memvar)', 'href="MEMVAR_Pair_23i2.html" title="T2 object">'],
['i2', '(Memvar)', 'href="MEMVAR_Triple_23i2.html" title="T2 object">'],
['i3', '(Memvar)', 'href="MEMVAR_Triple_23i3.html" title="T3 object">'],
['id', '(Function)', 'href="FUNCTION.id.html" title="A value that identifies the underlying sequence.">'],
['id', '(Memvar)', 'href="MEMVAR_Aligned_Read_Store_Element_23id.html" title="The alignment id refers to associated alignment information in Memvar.FragmentStore#alignQualityStore or Memvar.FragmentStore#alignedReadTagStore.">'],
['Id', '(Metafunction)', 'href="METAFUNCTION_Id.html" title="Type of an object that represents an id.">'],
['idCount', '(Function)', 'href="FUNCTION.id_Count.html" title="Determines the number of ids that were obtained.">'],
['idInUse', '(Function)', 'href="FUNCTION.id_In_Use.html" title="Checks whether the given id is in use or not.">'],
['IdManager', '(Class)', 'href="CLASS_Id_Manager.html" title="Id manager that provides unique ids for vertices and edges.">'],
['idToPosition', '(Function)', 'href="FUNCTION.id_To_Position.html" title="Retrieves the position of a string in the StringSet given an id.">'],
['in1', '(Memvar)', 'href="MEMVAR_Bundle2_23in1.html" title="TInput1 reference">'],
['in1', '(Memvar)', 'href="MEMVAR_Bundle3_23in1.html" title="TInput1 reference">'],
['in1', '(Memvar)', 'href="MEMVAR_Bundle5_23in1.html" title="TInput1 reference">'],
['in2', '(Memvar)', 'href="MEMVAR_Bundle2_23in2.html" title="TInput2 reference">'],
['in2', '(Memvar)', 'href="MEMVAR_Bundle3_23in2.html" title="TInput2 reference">'],
['in2', '(Memvar)', 'href="MEMVAR_Bundle5_23in2.html" title="TInput2 reference">'],
['in3', '(Memvar)', 'href="MEMVAR_Bundle3_23in3.html" title="TInput3 reference">'],
['in3', '(Memvar)', 'href="MEMVAR_Bundle5_23in3.html" title="TInput3 reference">'],
['in4', '(Memvar)', 'href="MEMVAR_Bundle5_23in4.html" title="TInput4 reference">'],
['in5', '(Memvar)', 'href="MEMVAR_Bundle5_23in5.html" title="TInput5 reference">'],
['inDegree', '(Function)', 'href="FUNCTION.in_Degree.html" title="Number of incoming edges for a given vertex.">'],
['Index', '(Class)', 'href="CLASS_Index.html" title="Contains preprocessing data of a fixed text. Allows fast dictionary look-up and advanced computations.">'],
['Index Find Algorithm', '(Tag)', 'href="TAG_Index+_Find+_Algorithm.html" title="Tag to specify the index search algorithm.">'],
['Index Finder', '(Demo)', 'href="DEMO_Index+_Finder.html" title="Example for using a Class.Finder of an Class.Index.">'],
['Index Finder StringSet', '(Demo)', 'href="DEMO_Index+_Finder+_String_Set.html" title="Example for using a Class.Finder of an Class.Index of a Class.StringSet.">'],
['indexBucketMap', '(Function)', 'href="FUNCTION.index_Bucket_Map.html" title="Shortcut for getFibre(.., QGramBucketMap).">'],
['indexBwt', '(Function)', 'href="FUNCTION.index_Bwt.html" title="Shortcut for getFibre(.., EsaBwt).">'],
['indexChildtab', '(Function)', 'href="FUNCTION.index_Childtab.html" title="Shortcut for getFibre(.., EsaChildtab).">'],
['indexCounts', '(Function)', 'href="FUNCTION.index_Counts.html" title="Shortcut for getFibre(.., QGramCounts).">'],
['indexCountsDir', '(Function)', 'href="FUNCTION.index_Counts_Dir.html" title="Shortcut for getFibre(.., QGramCountsDir).">'],
['indexCreate', '(Function)', 'href="FUNCTION.index_Create.html" title="Creates a specific Metafunction.Fibre.">'],
['IndexDfi', '(Spec)', 'href="SPEC_Index_Dfi.html" title="The Deferred Frequency Index (see Weese and Schulz, &quot;Efficient string mining under constraints via the deferred frequency index&quot;).">'],
['indexDir', '(Function)', 'href="FUNCTION.index_Dir.html" title="Shortcut for getFibre(.., QGramDir).">'],
['IndexEsa', '(Spec)', 'href="SPEC_Index_Esa.html" title="An index based on an enhanced suffix array.">'],
['indexLcp', '(Function)', 'href="FUNCTION.index_Lcp.html" title="Shortcut for getFibre(.., EsaLcp).">'],
['indexLcpe', '(Function)', 'href="FUNCTION.index_Lcpe.html" title="Shortcut for getFibre(.., EsaLcpe).">'],
['IndexQGram', '(Spec)', 'href="SPEC_Index_Q_Gram.html" title="An index based on an array of sorted q-grams.">'],
['indexRawSA', '(Function)', 'href="FUNCTION.index_Raw_S_A.html" title="Shortcut for getFibre(.., EsaRawSA).">'],
['indexRawText', '(Function)', 'href="FUNCTION.index_Raw_Text.html" title="Shortcut for getFibre(.., EsaRawText).">'],
['indexRequire', '(Function)', 'href="FUNCTION.index_Require.html" title="On-demand creation of a specific Metafunction.Fibre.">'],
['indexSA', '(Function)', 'href="FUNCTION.index_S_A.html" title="Shortcut for getFibre(.., EsaSA).">'],
['indexShape', '(Function)', 'href="FUNCTION.index_Shape.html" title="Shortcut for getFibre(.., QGramShape).">'],
['indexSupplied', '(Function)', 'href="FUNCTION.index_Supplied.html" title="Returns whether a specific Metafunction.Fibre is present.">'],
['indexText', '(Function)', 'href="FUNCTION.index_Text.html" title="Shortcut for getFibre(.., EsaText).">'],
['IndexWotd', '(Spec)', 'href="SPEC_Index_Wotd.html" title="An index based on a lazy suffix tree (see Giegerich et al., &quot;Efficient implementation of lazy suffix trees&quot;).">'],
['infimumValueImpl', '(Function)', 'href="FUNCTION.infimum_Value_Impl.html" title="Implements Function.minValue.">'],
['infix', '(Function)', 'href="FUNCTION.infix.html" title="Creates infix object.">'],
['Infix', '(Metafunction)', 'href="METAFUNCTION_Infix.html" title="Infix sequence type.">'],
['InfixSegment', '(Spec)', 'href="SPEC_Infix_Segment.html" title="An arbitrary segment.">'],
['infixWithLength', '(Function)', 'href="FUNCTION.infix_With_Length.html" title="Creates infix object.">'],
['insert', '(Function)', 'href="FUNCTION.insert.html" title="Inserts a sequence into a container.">'],
['insert', '(Function)', 'href="FUNCTION.map_23insert.html" title="Insert new value into map.">'],
['insertGap', '(Function)', 'href="FUNCTION.insert_Gap.html" title="Insert one blank into a gapped sequence.">'],
['insertGaps', '(Function)', 'href="FUNCTION.insert_Gaps.html" title="Insert blanks into a gapped sequence.">'],
['InsertionBuffer', '(Metafunction)', 'href="METAFUNCTION_Insertion_Buffer.html" title="Return type of insertion buffer string for a journaled string.">'],
['insertValue', '(Function)', 'href="FUNCTION.insert_Value.html" title="Inserts a single value into a container.">'],
['IntegralForValue', '(Metafunction)', 'href="METAFUNCTION_Integral_For_Value.html" title="Returns an itegral type that provides sufficient space to store a value.">'],
['integrateAlign', '(Function)', 'href="FUNCTION.integrate_Align.html" title="Integrates an alignment into another by copying the gaps.">'],
['InternalMap', '(Class)', 'href="CLASS_Internal_Map.html" title="An internal property map using member ids.">'],
['InternalPointerMap', '(Class)', 'href="CLASS_Internal_Pointer_Map.html" title="An internal property map using pointer to members.">'],
['InternalRawMap', '(Class)', 'href="CLASS_Internal_Raw_Map.html" title="An internal property map using raw pointer to members.">'],
['Interval Tree Node', '(Spec)', 'href="SPEC_Interval+_Tree+_Node.html" title="An Interval Tree Node that stores intervals explicitely in each node.">'],
['IntervalAndCargo', '(Class)', 'href="CLASS_Interval_And_Cargo.html" title="A simple record type that stores an interval and a cargo value.">'],
['IntervalAndCargo', '(Memfunc)', 'href="MEMFUNC_Interval_And_Cargo_23_Interval_And_Cargo.html" title="Constructor.">'],
['IntervalTree', '(Class)', 'href="CLASS_Interval_Tree.html" title="A datastructure that efficiently stores intervals.">'],
['IntervalTree', '(Memfunc)', 'href="MEMFUNC_Interval_Tree_23_Interval_Tree.html" title="Constructor">'],
['IntervalTree Centers', '(Tag)', 'href="TAG_Interval_Tree+_Centers.html" title="Tag to select a specific way to compute the center of an interval tree node.">'],
['IntervalTree Node Types', '(Tag)', 'href="TAG_Interval_Tree+_Node+_Types.html" title="Tags to select the node type for Class.IntervalTree.">'],
['IntervalTreeNode', '(Class)', 'href="CLASS_Interval_Tree_Node.html" title="Element of Class.IntervalTree.">'],
['IntervalTreeNode', '(Memfunc)', 'href="MEMFUNC_Interval_Tree_Node_23_Interval_Tree_Node.html" title="Default constructor.">'],
['INVALID_ID', '(Memvar)', 'href="MEMVAR_Aligned_Read_Store_Element_23_I_N_V_A_L_I_D___I_D.html" title="Constant to represent an invalid id.">'],
['INVALID_ID', '(Memvar)', 'href="MEMVAR_Contig_Store_Element_23_I_N_V_A_L_I_D___I_D.html" title="Constant to represent an invalid id.">'],
['INVALID_ID', '(Memvar)', 'href="MEMVAR_Mate_Pair_Store_Element_23_I_N_V_A_L_I_D___I_D.html" title="Constant to represent an invalid id.">'],
['INVALID_ID', '(Memvar)', 'href="MEMVAR_Read_Store_Element_23_I_N_V_A_L_I_D___I_D.html" title="Constant to represent an invalid id.">'],
['inverseHash', '(Function)', 'href="FUNCTION.inverse_Hash.html" title="Determines the corresponding sequence pattern given the hash value.">'],
['isBooleanOption', '(Function)', 'href="FUNCTION.is_Boolean_Option.html" title="Returns whether option is a switch.">'],
['IsContiguous', '(Metafunction)', 'href="METAFUNCTION_Is_Contiguous.html" title="Determines whether a container stores its elements in a contiguous array.">'],
['isDoubleOption', '(Function)', 'href="FUNCTION.is_Double_Option.html" title="Returns whether option argument can be a double.">'],
['isEqual', '(Function)', 'href="FUNCTION.is_Equal.html" title="Operator &quot;==&quot;.">'],
['isGap', '(Function)', 'href="FUNCTION.is_Gap.html" title="Test a gapped sequence for gaps at a specific position.">'],
['isGreater', '(Function)', 'href="FUNCTION.is_Greater.html" title="Operator &quot;>&quot;.">'],
['isGreaterOrEqual', '(Function)', 'href="FUNCTION.is_Greater_Or_Equal.html" title="Operator &quot;>=&quot;.">'],
['isHiddenOption', '(Function)', 'href="FUNCTION.is_Hidden_Option.html" title="Returns whether option is hidden on the help screen.">'],
['IsIntegral', '(Metafunction)', 'href="METAFUNCTION_Is_Integral.html" title="Tests for a type to be of integral value.">'],
['isIntOption', '(Function)', 'href="FUNCTION.is_Int_Option.html" title="Returns whether option argument can be an integer.">'],
['isLabelOption', '(Function)', 'href="FUNCTION.is_Label_Option.html" title="Returns whether an option label should be printed on the help screen.">'],
['isLeaf', '(Function)', 'href="FUNCTION_Graph_23is_Leaf.html" title="Tests whether a given vertex is a leaf or not.">'],
['isLeaf', '(Function)', 'href="FUNCTION_Index_23is_Leaf.html" title="Test whether iterator points to a leaf.">'],
['isLeftMaximal', '(Function)', 'href="FUNCTION.is_Left_Maximal.html" title="Test whether the occurences of an iterator\'s Function.representative mutually differ in the character left of the hits.">'],
['isLess', '(Function)', 'href="FUNCTION.is_Less.html" title="Operator &quot;&lt;&quot;.">'],
['isLessOrEqual', '(Function)', 'href="FUNCTION.is_Less_Or_Equal.html" title="Operator &quot;&lt;=&quot;.">'],
['isNotEqual', '(Function)', 'href="FUNCTION.is_Not_Equal.html" title="Operator &quot;!=&quot;.">'],
['isOptionList', '(Function)', 'href="FUNCTION.is_Option_List.html" title="Returns whether the option can be given multiple times.">'],
['isOptionMandatory', '(Function)', 'href="FUNCTION.is_Option_Mandatory.html" title="Returns whether option is mandatory.">'],
['isPartiallyLeftExtensible', '(Function)', 'href="FUNCTION.is_Partially_Left_Extensible.html" title="Test whether the characters left of the two occurences of Function.representative are equal.">'],
['isPrefix', '(Function)', 'href="FUNCTION.is_Prefix.html" title="Test whether a sequence is prefix of another sequence.">'],
['isReversed', '(Function)', 'href="FUNCTION.is_Reversed.html" title="Returns true if the segment match is in reverse orientation.">'],
['isRightTerminal', '(Function)', 'href="FUNCTION.is_Right_Terminal.html" title="Test whether iterator points to a suffix.">'],
['isRoot', '(Function)', 'href="FUNCTION_Graph_23is_Root.html" title="Tests whether a given vertex is the root or not.">'],
['isRoot', '(Function)', 'href="FUNCTION.is_Root.html" title="Test whether iterator points to the root node.">'],
['IsSequence', '(Metafunction)', 'href="METAFUNCTION_Is_Sequence.html" title="Determines whether a container stores its elements in sequential order.">'],
['isSetLong', '(Function)', 'href="FUNCTION.is_Set_Long.html" title="Returns whether a long-name option was set on the parsed command line.">'],
['isSetShort', '(Function)', 'href="FUNCTION.is_Set_Short.html" title="Returns whether a short-name option was set on the parsed command line.">'],
['isSilent', '(Function)', 'href="FUNCTION.is_Silent.html" title="Indicates whether a state is silent or not.">'],
['IsSimple', '(Metafunction)', 'href="METAFUNCTION_Is_Simple.html" title="Tests type to be simple.">'],
['isStringOption', '(Function)', 'href="FUNCTION.is_String_Option.html" title="Returns whether option argument can be a string.">'],
['isUnique', '(Function)', 'href="FUNCTION.is_Unique.html" title="Test whether the Function.representative occurs only once in every sequence.">'],
['Iter', '(Class)', 'href="CLASS_Iter.html" title="Iterator that is used to traverse containers.">'],
['iter', '(Function)', 'href="FUNCTION.iter.html" title="Iterator to item at given position.">'],
['Iter', '(Memfunc)', 'href="MEMFUNC_Adaptor_Iterator_23_Iter.html" title="Constructor">'],
['Iter', '(Memfunc)', 'href="MEMFUNC_Concat_Virtual+_Iterator_23_Iter.html" title="Constructor">'],
['Iter', '(Memfunc)', 'href="MEMFUNC_Position_Iterator_23_Iter.html" title="Constructor">'],
['Iterator', '(Concept)', 'href="CONCEPT_Iterator.html" title="Object that iterates through container.">'],
['Iterator', '(Memfunc)', 'href="MEMFUNC_Bottom_Up+_Iterator_23_Iterator.html" title="Constructor">'],
['Iterator', '(Memfunc)', 'href="MEMFUNC_Max_Repeats+_Iterator_23_Iterator.html" title="Constructor">'],
['Iterator', '(Memfunc)', 'href="MEMFUNC_Multi_Mems+_Iterator_23_Iterator.html" title="Constructor">'],
['Iterator', '(Memfunc)', 'href="MEMFUNC_Mums+_Iterator_23_Iterator.html" title="Constructor">'],
['Iterator', '(Memfunc)', 'href="MEMFUNC_Super_Max_Repeats+_Iterator_23_Iterator.html" title="Constructor">'],
['Iterator', '(Memfunc)', 'href="MEMFUNC_Super_Max_Repeats_Fast+_Iterator_23_Iterator.html" title="Constructor">'],
['Iterator', '(Memfunc)', 'href="MEMFUNC_Top_Down+_Iterator_23_Iterator.html" title="Constructor">'],
['Iterator', '(Memfunc)', 'href="MEMFUNC_Top_Down_History+_Iterator_23_Iterator.html" title="Constructor">'],
['Iterator', '(Metafunction)', 'href="METAFUNCTION_Iterator.html" title="Type of iterator objects that are used to traverse the container.">'],
['Iterator Basics', '(Demo)', 'href="DEMO_Iterator+_Basics.html" title="Simple iterator functions.">'],
['Iterator Proxy', '(Spec)', 'href="SPEC_Iterator+_Proxy.html" title="Proxy that is implemented by an iterator.">'],
['Iterator Spec', '(Tag)', 'href="TAG_Iterator+_Spec.html" title="Specifies the kind of an iterator.">'],
['IterComplementConst', '(Metafunction)', 'href="METAFUNCTION_Iter_Complement_Const.html" title="Complement the &quot;constness&quot; of the container of an iterator.">'],
['IterMakeConst', '(Metafunction)', 'href="METAFUNCTION_Iter_Make_Const.html" title="Make the container of an Iter const.">'],
['Iupac', '(Spec)', 'href="SPEC_Iupac.html" title="Iupac code for DNA.">'],
['IupacIterator', '(Shortcut)', 'href="SHORTCUT_Iupac_Iterator.html" title="Iterator for Shortcut.IupacString.">'],
['IupacString', '(Shortcut)', 'href="SHORTCUT_Iupac_String.html" title="A string of Spec.Iupac.">'],
['Joiner', '(Spec)', 'href="SPEC_Joiner.html" title="Joins two or three input streams.">'],
['Journaled String', '(Spec)', 'href="SPEC_Journaled+_String.html" title="Journaled versions of arbitrary underlying string.">'],
['JournalType', '(Metafunction)', 'href="METAFUNCTION_Journal_Type.html" title="Metafunction for returning the type of the journal of a Journaled String.">'],
['key', '(Function)', 'href="FUNCTION.key.html" title="Get the the key of the element.">'],
['Key', '(Metafunction)', 'href="METAFUNCTION_Key.html" title="Key type of a key to cargo mapping.">'],
['Kruskals Algorithm', '(Demo)', 'href="DEMO_Kruskals+_Algorithm.html" title="Kruskal\'s algorithm for computing a minimum spanning tree.">'],
['kruskalsAlgorithm', '(Function)', 'href="FUNCTION.kruskals_Algorithm.html" title="Computes a minimum spanning tree on a graph.">'],
['label', '(Function)', 'href="FUNCTION_Automaton_23label.html" title="Returns the label of the out-edge this iterator points to (for automatons).">'],
['label', '(Function)', 'href="FUNCTION.label.html" title="Gets the label that is associated with this vertex descriptor or the sequence that is associated with a fragment.">'],
['layoutAlignment', '(Function)', 'href="FUNCTION.layout_Alignment.html" title="Calculates a visible layout of aligned reads.">'],
['lca', '(Function)', 'href="FUNCTION.lca.html" title="Returns the last common ancestor of two tree nodes.">'],
['lcp', '(Function)', 'href="FUNCTION.lcp.html" title="Returns the length of the longest-common-prefix of two suffix tree nodes.">'],
['lcpAt', '(Function)', 'href="FUNCTION.lcp_At.html" title="Shortcut for value(indexLcp(..), ..).">'],
['lcpeAt', '(Function)', 'href="FUNCTION.lcpe_At.html" title="Shortcut for value(indexLcpe(..), ..).">'],
['lcpLength', '(Function)', 'href="FUNCTION.lcp_Length.html" title="Length of longest common prefix.">'],
['leftBoundary', '(Function)', 'href="FUNCTION.left_Boundary.html" title="Access to the right boundary.">'],
['leftDiagonal', '(Function)', 'href="FUNCTION.left_Diagonal.html" title=" Returns the most left diagonal of the seed (maximum diagonal value).">'],
['leftDim0', '(Function)', 'href="FUNCTION.left_Dim0.html" title=" Returns the first position of the seed in the query.">'],
['leftDim1', '(Function)', 'href="FUNCTION.left_Dim1.html" title=" Returns the first position of the seed in the database.">'],
['leftPosition', '(Function)', 'href="FUNCTION.left_Position.html" title="The begin position of segment in a seed.">'],
['length', '(Function)', 'href="FUNCTION.length.html" title="The number of items/characters.">'],
['LENGTH', '(Metafunction)', 'href="METAFUNCTION_L_E_N_G_T_H.html" title="Number of elements in a fixed-size container.">'],
['LevenshteinDistance', '(Tag)', 'href="TAG_Levenshtein_Distance.html" title="Switch to trigger Levenshtein distance, which is a measure of edit operations (character substitutions, deletions or insertions).">'],
['Lexical', '(Class)', 'href="CLASS_Lexical.html" title="Comparator for lexical comparison.">'],
['libId', '(Memvar)', 'href="MEMVAR_Mate_Pair_Store_Element_23lib_Id.html" title="Refers to a library in the Memvar.FragmentStore#libraryStore or is INVALID_ID if the mate-pair has no library.">'],
['libraryNameStore', '(Memvar)', 'href="MEMVAR_Fragment_Store_23library_Name_Store.html" title="String that maps from libId to libName.">'],
['libraryStore', '(Memvar)', 'href="MEMVAR_Fragment_Store_23library_Store.html" title="String that maps from libId to &lt;mean, std>.">'],
['LibraryStoreElement', '(Class)', 'href="CLASS_Library_Store_Element.html" title="Represents a fragment library.">'],
['LibraryStoreElement', '(Memfunc)', 'href="MEMFUNC_Library_Store_Element_23_Library_Store_Element.html" title="Constructor">'],
['list1', '(Memvar)', 'href="MEMVAR_Interval_Tree_Node_23list1.html" title="Sorted list of pointers to intervals, sorted in ascending according to their left boundary points.">'],
['list2', '(Memvar)', 'href="MEMVAR_Interval_Tree_Node_23list2.html" title="Sorted list of pointers to intervals, sorted in descending according to their right boundary points.">'],
['ListType', '(Metafunction)', 'href="METAFUNCTION_List_Type.html" title="Type of lists in tree nodes.">'],
['loadContig', '(Function)', 'href="FUNCTION.load_Contig.html" title="Manually loads a contig sequence.">'],
['loadContigs', '(Function)', 'href="FUNCTION.load_Contigs.html" title="Loads contigs into fragment store.">'],
['loadReads', '(Function)', 'href="FUNCTION.load_Reads.html" title="Loads reads into fragment store.">'],
['loadScoreMatrix', '(Function)', 'href="FUNCTION.load_Score_Matrix.html" title="Load a score matrix from a file.">'],
['Local Alignment Algorithms', '(Tag)', 'href="TAG_Local+_Alignment+_Algorithms.html" title="Local alignment algorithm used by localAlignment.">'],
['Local Alignments', '(Demo)', 'href="DEMO_Local+_Alignments.html" title="Computing local alignments between two sequences.">'],
['localAlignment', '(Function)', 'href="FUNCTION.local_Alignment.html" title="Computes the best local alignment of two sequences.">'],
['LocalAlignmentFinder', '(Class)', 'href="CLASS_Local_Alignment_Finder.html" title="Stores the information necessary for local alignment dynamic programming.">'],
['LocalAlignmentFinder', '(Memfunc)', 'href="MEMFUNC_Local_Alignment_Finder_23_Local_Alignment_Finder.html" title="Constructor">'],
['lockContig', '(Function)', 'href="FUNCTION.lock_Contig.html" title="Locks a contig sequence from being removed.">'],
['lockContigs', '(Function)', 'href="FUNCTION.lock_Contigs.html" title="Locks all contig sequences from being removed.">'],
['Log-Normal Pdf', '(Spec)', 'href="SPEC_Log-_Normal+_Pdf.html" title="Log-normal probability density function.">'],
['log2', '(Function)', 'href="FUNCTION.log2.html" title="Computes logarithm of base 2 for integer types">'],
['logarithmize', '(Function)', 'href="FUNCTION.logarithmize.html" title="Logarithmizes each element of a given Class.FrequencyDistribution object.">'],
['Logical Values', '(Tag)', 'href="TAG_Logical+_Values.html" title="Tag that represents true and false.">'],
['Longest Common Subsequence', '(Demo)', 'href="DEMO_Longest+_Common+_Subsequence.html" title="Longest common subsequence code example">'],
['Longest Increasing Subsequence', '(Demo)', 'href="DEMO_Longest+_Increasing+_Subsequence.html" title="Longest increasing subsequence code example">'],
['longestCommonSubsequence', '(Function)', 'href="FUNCTION.longest_Common_Subsequence.html" title="Computes the longest common subsequence.">'],
['longestIncreasingSubsequence', '(Function)', 'href="FUNCTION.longest_Increasing_Subsequence.html" title="Computes the longest increasing subsequence.">'],
['longName', '(Function)', 'href="FUNCTION.long_Name.html" title="Returns the long-name of a Class.CommandLineOption object.">'],
['lowerBoundAlignedReads', '(Function)', 'href="FUNCTION.lower_Bound_Aligned_Reads.html" title="Performs a binary lower bound search on the aligned reads.">'],
['Map', '(Class)', 'href="CLASS_Map.html" title="Set/dictionary container.">'],
['MapperConfig', '(Spec)', 'href="SPEC_Mapper_Config.html" title="Configuration of Mapper.">'],
['MapperConfigSize', '(Spec)', 'href="SPEC_Mapper_Config_Size.html" title="Configuration of Mapper.">'],
['MapperSpec', '(Spec)', 'href="SPEC_Mapper_Spec.html" title="Permutes all elements using a custom destination function.">'],
['mapValue', '(Function)', 'href="FUNCTION.map_Value.html" title="Subscript operator [ ] of maps.">'],
['MapValue', '(Metafunction)', 'href="METAFUNCTION_Map_Value.html" title="Type of the map value type.">'],
['MarkovModel', '(Class)', 'href="CLASS_Markov_Model.html" title="Gives a suitable representation of a Marcov Chain.">'],
['MarkovModel', '(Memfunc)', 'href="MEMFUNC_Markov_Model_23_Markov_Model.html" title="Constructor">'],
['matchRefinement', '(Function)', 'href="FUNCTION.match_Refinement.html" title="Refines (i.e. cuts into smaller parts) a set of pairwise segment matches in such a way that none of the segments partly overlap. They are either identical (fully overlapping) or non-overlapping.">'],
['matePairId', '(Memvar)', 'href="MEMVAR_Read_Store_Element_23mate_Pair_Id.html" title="Refers to a mate-pair in the Memvar.FragmentStore#matePairStore or is INVALID_ID if the read is not paired.">'],
['matePairNameStore', '(Memvar)', 'href="MEMVAR_Fragment_Store_23mate_Pair_Name_Store.html" title="String that maps from contigId to contigName.">'],
['matePairStore', '(Memvar)', 'href="MEMVAR_Fragment_Store_23mate_Pair_Store.html" title="String that maps from matePairId to &lt;readId[2], libId>.">'],
['MatePairStoreElement', '(Class)', 'href="CLASS_Mate_Pair_Store_Element.html" title="Represents a mate-pair.">'],
['MatePairStoreElement', '(Memfunc)', 'href="MEMFUNC_Mate_Pair_Store_Element_23_Mate_Pair_Store_Element.html" title="Constructor">'],
['Matrix', '(Class)', 'href="CLASS_Matrix.html" title="A simple n-dimensional matrix type.">'],
['Maximal Repeats', '(Demo)', 'href="DEMO_Maximal+_Repeats.html" title="Example for using the Spec.MaxRepeats Iterator.">'],
['Maximal Unique Matches', '(Demo)', 'href="DEMO_Maximal+_Unique+_Matches.html" title="Example for using the Spec.Mums Iterator.">'],
['Maximum Flow', '(Demo)', 'href="DEMO_Maximum+_Flow.html" title="Ford-Fulkerson maximum flow code example">'],
['maximumDistance', '(Function)', 'href="FUNCTION.maximum_Distance.html" title="Sets the maximal distance between two seed during a chaining process.">'],
['MaxRepeats Iterator', '(Spec)', 'href="SPEC_Max_Repeats+_Iterator.html" title="Iterator to search for all maximal repeats.">'],
['maxValue', '(Function)', 'href="FUNCTION.max_Value.html" title="Supremum for a given type.">'],
['MaxValue', '(Metafunction)', 'href="METAFUNCTION_Max_Value.html" title="Supremum for a given type.">'],
['mean', '(Memvar)', 'href="MEMVAR_Library_Store_Element_23mean.html" title="The library size mean.">'],
['MeanStdDev', '(Tag)', 'href="TAG_Mean_Std_Dev.html" title="Tag to specify that the given parameters are mean an standard deviation of the lognormal distribution.">'],
['MemoryManager', '(Class)', 'href="CLASS_Memory_Manager.html" title="Saves and manages data using IDs.">'],
['MemoryManagerIndex', '(Spec)', 'href="SPEC_Memory_Manager_Index.html" title=" Faster than the pointer version but needs data size of at least size_t.">'],
['MemoryManagerPointer', '(Spec)', 'href="SPEC_Memory_Manager_Pointer.html" title=" Datasize of at least 4 bytes. Not suitable for many blocks.">'],
['Mersenne Twister Rng', '(Spec)', 'href="SPEC_Mersenne+_Twister+_Rng.html" title="Mersenne Twister 19937 Random Number Generator">'],
['Metafunctions', '', '<a target=_parent href="INDEXPAGE_Metafunction.html">'],
['minValue', '(Function)', 'href="FUNCTION.min_Value.html" title="Infimum for a given type.">'],
['MinValue', '(Metafunction)', 'href="METAFUNCTION_Min_Value.html" title="Infimum for a given type.">'],
['MMap String', '(Spec)', 'href="SPEC_M_Map+_String.html" title="String that is stored in external memory. Uses memory mapping.">'],
['ModComplementDna', '(Shortcut)', 'href="SHORTCUT_Mod_Complement_Dna.html" title="Modifier specialization type for the complement of Spec.Dna alphabet sequences.">'],
['ModComplementDna5', '(Shortcut)', 'href="SHORTCUT_Mod_Complement_Dna5.html" title="Modifier specialization type for the complement of Spec.Dna5 alphabet sequences.">'],
['ModComplementRna', '(Shortcut)', 'href="SHORTCUT_Mod_Complement_Rna.html" title="Modifier specialization type for the complement of Spec.Rna alphabet sequences.">'],
['ModComplementRna5', '(Shortcut)', 'href="SHORTCUT_Mod_Complement_Rna5.html" title="Modifier specialization type for the complement of Spec.Rna5 alphabet sequences.">'],
['ModifiedAlphabet', '(Class)', 'href="CLASS_Modified_Alphabet.html" title="Modifies value types.">'],
['ModifiedIterator', '(Class)', 'href="CLASS_Modified_Iterator.html" title="Allows to modify arbitrary iterators by specializing what differs from an origin.">'],
['ModifiedString', '(Class)', 'href="CLASS_Modified_String.html" title="Allows to modify arbitrary strings by specializing what differs from an origin.">'],
['ModReverse', '(Demo)', 'href="DEMO_Mod_Reverse.html" title="Modifier example for reverse strings.">'],
['ModReverse', '(Spec)', 'href="SPEC_Mod_Reverse.html" title="Mirrors the characters from begin to end.">'],
['ModView', '(Demo)', 'href="DEMO_Mod_View.html" title="How to modify strings with a per-character functor.">'],
['ModView', '(Spec)', 'href="SPEC_Mod_View.html" title="Transforms the characters of the THost string/iterator using a custom function.">'],
['Motif', '(Metafunction)', 'href="METAFUNCTION_Motif.html" title="The string type of the finder.">'],
['Motif Finder', '(Demo)', 'href="DEMO_Motif+_Finder.html" title="Examples for how to start a motif search using SeqAn\'s Motif Finder.">'],
['motifCount', '(Function)', 'href="FUNCTION.motif_Count.html" title="Gets number of motifs in the Class.MotifFinder.">'],
['MotifFinder', '(Class)', 'href="CLASS_Motif_Finder.html" title="Holds the algorithm parameter values and the motif instance(s) found by the appropriate           motif discovery algorithm.">'],
['move', '(Function)', 'href="FUNCTION.move.html" title="Hands over content from one container to another container.">'],
['Move Switch', '(Tag)', 'href="TAG_Move+_Switch.html" title="Switch to force move.">'],
['moveSource', '(Function)', 'href="FUNCTION.move_Source.html" title="Moves the source to a new value.">'],
['moveValue', '(Function)', 'href="FUNCTION.move_Value.html" title="Assigns value to item.">'],
['mtRand', '(Function)', 'href="FUNCTION.mt_Rand.html" title="Return a Mersenne-Twister random number.">'],
['mtRandDouble', '(Function)', 'href="FUNCTION.mt_Rand_Double.html" title="Return a random number between 0 and 1 using mtRand.">'],
['mtRandInit', '(Function)', 'href="FUNCTION.mt_Rand_Init.html" title="Initialize the Mersenne-Twister random number generator.">'],
['Multi Pool Allocator', '(Spec)', 'href="SPEC_Multi+_Pool+_Allocator.html" title="Allocator that pools memory blocks.">'],
['MultiBfam', '(Spec)', 'href="SPEC_Multi_Bfam.html" title="Multi-Pattern Backward Factor Automaton Matching.">'],
['MultiBfam&lt;Oracle&gt;', '(Spec)', 'href="SPEC_Multi_Bfam_3c_Oracle_3e.html" title="Multi-Pattern Backward Factor Automaton Matching using an oracle automaton.">'],
['MultiFasta', '(Shortcut)', 'href="SHORTCUT_Multi_Fasta.html" title="A sequence file mapped in memory as a StringSet of concatenated sequence file fragments.">'],
['multiLocalAlignment', '(Function)', 'href="FUNCTION.multi_Local_Alignment.html" title="Computes multiple local alignments of two sequences.">'],
['MultiMems Iterator', '(Spec)', 'href="SPEC_Multi_Mems+_Iterator.html" title="Iterator to search for MultiMems.">'],
['MultipleShiftAnd', '(Spec)', 'href="SPEC_Multiple_Shift_And.html" title=" Multiple exact string matching using bit parallelism. The total size of the patterns should fit into a computer word.">'],
['MultiSeed', '(Spec)', 'href="SPEC_Multi_Seed.html" title="Data structure which represents a seed of multiple sequences.">'],
['MultiSeqFile', '(Shortcut)', 'href="SHORTCUT_Multi_Seq_File.html" title="A sequence file mapped in memory as a StringSet of concatenated sequence file fragments.">'],
['Mummy', '(Demo)', 'href="DEMO_Mummy.html" title="Simple MUMmer clone.">'],
['Mums Iterator', '(Spec)', 'href="SPEC_Mums+_Iterator.html" title="Iterator to search for all maximum unique matches.">'],
['MuSigma', '(Tag)', 'href="TAG_Mu_Sigma.html" title="Tag to specify that the given parameters are mu and sigma of the underlying normal distribution for lognormal distributions.">'],
['Myers', '(Spec)', 'href="SPEC_Myers.html" title="Provides fast approximate searching of one string in another using Myer\'s fast bit-parallel algorithm with application of the Ukkonen-trick.">'],
['MyersUkkonen', '(Shortcut)', 'href="SHORTCUT_Myers_Ukkonen.html" title="Semin-global (query-global, text-local) pattern matching without findBegin() support.">'],
['MyersUkkonenBanded', '(Shortcut)', 'href="SHORTCUT_Myers_Ukkonen_Banded.html" title="Semin-global (query-global, text-local) pattern matching without findBegin() support.">'],
['MyersUkkonenGlobal', '(Shortcut)', 'href="SHORTCUT_Myers_Ukkonen_Global.html" title="Global (query-global, text-global) pattern matching without findBegin() support.">'],
['MyersUkkonenGlobalBanded', '(Shortcut)', 'href="SHORTCUT_Myers_Ukkonen_Global_Banded.html" title="global (query-global, text-global) pattern matching without findBegin() support.">'],
['Namer', '(Spec)', 'href="SPEC_Namer.html" title="Extends the input stream by a second field which names the elements.">'],
['NameStoreCache', '(Class)', 'href="CLASS_Name_Store_Cache.html" title="Stores a mapping from names to ids.">'],
['NameStoreCache', '(Memvar)', 'href="MEMVAR_Name_Store_Cache_23_Name_Store_Cache.html" title="Constructor">'],
['needle', '(Function)', 'href="FUNCTION.needle.html" title="Returns the needle of a Class.Pattern object (not implemented for some online-algorithms).">'],
['Needle', '(Metafunction)', 'href="METAFUNCTION_Needle.html" title="Returns the needle type of a Class.Pattern type.">'],
['Nested Modifiers', '(Demo)', 'href="DEMO_Nested+_Modifiers.html" title="How to combine modifiers.">'],
['nextS', '(Function)', 'href="FUNCTION.next_S.html" title="Accesses the next source pointer.">'],
['nextT', '(Function)', 'href="FUNCTION.next_T.html" title="Accesses the next target pointer.">'],
['nodeDepth', '(Function)', 'href="FUNCTION.node_Depth.html" title="Returns the zero-based node depth of the iterator node.">'],
['nodeHullPredicate', '(Function)', 'href="FUNCTION.node_Hull_Predicate.html" title="If false this node and its subtree is concealed.">'],
['nodePredicate', '(Function)', 'href="FUNCTION.node_Predicate.html" title="If false this node will be skipped during the bottom-up traversal.">'],
['nodeUp', '(Function)', 'href="FUNCTION.node_Up.html" title="Returns the vertex descriptor of the parent node.">'],
['NonHierarchical', '(Spec)', 'href="SPEC_Non_Hierarchical.html" title=" By using this Specialization the hierarchical verification is disabled.">'],
['NonScored SeedSet', '(Spec)', 'href="SPEC_Non_Scored+_Seed_Set.html" title="SeedSet that uses seeds without scores.">'],
['Normal Pdf', '(Spec)', 'href="SPEC_Normal+_Pdf.html" title="Normal probability density function.">'],
['normalize', '(Function)', 'href="FUNCTION.normalize.html" title="Determines the normalized frequencies.">'],
['Nothing', '(Tag)', 'href="TAG_Nothing.html" title="Tag that represents an absent parameter or an absent type.">'],
['numChildren', '(Function)', 'href="FUNCTION.num_Children.html" title="Number of children of a given tree vertex.">'],
['numEdges', '(Function)', 'href="FUNCTION.num_Edges.html" title="Number of edges in a graph.">'],
['numHits', '(Function)', 'href="FUNCTION.num_Hits.html" title="The total number of hits in a Blast report.">'],
['numHsps', '(Function)', 'href="FUNCTION.num_Hsps.html" title="The number of HSPs for an entire Blast report or for one Blast hit.">'],
['numTreeEdges', '(Function)', 'href="FUNCTION.num_Tree_Edges.html" title="Number of tree edges.">'],
['numVertices', '(Function)', 'href="FUNCTION.num_Vertices.html" title="Number of vertices in a graph.">'],
['obtainID', '(Function)', 'href="FUNCTION.obtain_I_D.html" title=" btains a new id from the id manager.">'],
['obtainId', '(Function)', 'href="FUNCTION.obtain_Id.html" title="Obtains a new id from the id manager.">'],
['Omops', '(Tag)', 'href="TAG_Omops.html" title="Represents the One or More Occurences Per Sequence model.">'],
['OneGappedShape', '(Spec)', 'href="SPEC_One_Gapped_Shape.html" title="A variable shape with one optional gap.">'],
['Oops', '(Tag)', 'href="TAG_Oops.html" title="Represents the One Occurrence Per Sequence model.">'],
['open', '(Function)', 'href="FUNCTION.open.html" title="Opens a file.">'],
['OpenAddressing', '(Spec)', 'href="SPEC_Open_Addressing.html" title="An index based on an array of sorted q-grams.">'],
['openTemp', '(Function)', 'href="FUNCTION.open_Temp.html" title="Opens a temporary file.">'],
['operator()', '(Memfunc)', 'href="MEMFUNC_Rng_23operator_28_29.html" title="Function call operator.">'],
['Oracle', '(Spec)', 'href="SPEC_Oracle.html" title="A factor oracle.">'],
['order', '(Memvar)', 'href="MEMVAR_Markov_Model_23order.html" title="The MarkovModel order">'],
['orderOccurrences', '(Function)', 'href="FUNCTION.order_Occurrences.html" title="Sorts a string of occurrences.">'],
['ordValue', '(Function)', 'href="FUNCTION.ord_Value.html" title="Maps an alphabet 1-to-1 to the interval [0..ValueSize).">'],
['Out-Edge Iterator', '(Spec)', 'href="SPEC_Out-_Edge+_Iterator.html" title="Out-edge iterator for Class.Graph.">'],
['outDegree', '(Function)', 'href="FUNCTION.out_Degree.html" title="Number of outgoing edges for a given vertex.">'],
['Overflow Strategy', '(Tag)', 'href="TAG_Overflow+_Strategy.html" title="The strategy for resizing containers.">'],
['Owner', '(Spec)', 'href="SPEC_Owner.html" title="A string set storing the strings as members.">'],
['Packed Pair', '(Spec)', 'href="SPEC_Packed+_Pair.html" title="Stores two arbitrary objects. Saves memory by disabling memory alignment.">'],
['Packed String', '(Spec)', 'href="SPEC_Packed+_String.html" title="A string that stores as many values in one machine word as possible.">'],
['Packed Triple', '(Spec)', 'href="SPEC_Packed+_Triple.html" title="Stores three arbitrary objects. Saves memory by disabling memory alignment.">'],
['Pair', '(Class)', 'href="CLASS_Pair.html" title="Stores two arbitrary objects.">'],
['Pair', '(Memfunc)', 'href="MEMFUNC_Pair_23_Pair.html" title="Constructor">'],
['pairMatchId', '(Memvar)', 'href="MEMVAR_Aligned_Read_Store_Element_23pair_Match_Id.html" title="Two read alignments having the same pairMatchId form a valid pair match. If INVALID_ID the read is either not paired or could not be aligned as part of a pair match.">'],
['pairScore', '(Memvar)', 'href="MEMVAR_Align_Quality_Store_Element_23pair_Score.html" title="Combined score of both alignments of a pair match.">'],
['Pam120', '(Shortcut)', 'href="SHORTCUT_Pam120.html" title="Pam120 scoring matrix.">'],
['Pam200', '(Shortcut)', 'href="SHORTCUT_Pam200.html" title="Pam200 scoring matrix.">'],
['Pam250', '(Shortcut)', 'href="SHORTCUT_Pam250.html" title="Pam250 scoring matrix.">'],
['Pam40', '(Shortcut)', 'href="SHORTCUT_Pam40.html" title="Pam40 scoring matrix.">'],
['parentEdgeFirstChar', '(Function)', 'href="FUNCTION.parent_Edge_First_Char.html" title="Returns the first character of the edge from an iterator node to its parent.">'],
['parentEdgeLabel', '(Function)', 'href="FUNCTION.parent_Edge_Label.html" title="Returns a substring representing the edge from an iterator node to its parent.">'],
['parentEdgeLength', '(Function)', 'href="FUNCTION.parent_Edge_Length.html" title="Returns the length of the edge from the iterator node to its parent.">'],
['parentRepLength', '(Function)', 'href="FUNCTION.parent_Rep_Length.html" title="Returns the length of the substring representing the path from root to iterator\'s parent node.">'],
['parentVertex', '(Function)', 'href="FUNCTION.parent_Vertex.html" title="Returns the parent vertex of an edge.">'],
['parse', '(Function)', 'href="FUNCTION.parse.html" title="Parses the command line.">'],
['parseString', '(Function)', 'href="FUNCTION.parse_String.html" title="Parses a string one character at a time and moves accordingly in the automaton.">'],
['Pattern', '(Class)', 'href="CLASS_Pattern.html" title="Holds the needle and preprocessing data (depends on algorithm).">'],
['Pattern', '(Concept)', 'href="CONCEPT_Pattern.html" title="Object that stores information about the glos:needle of a search.">'],
['Pdf', '(Class)', 'href="CLASS_Pdf.html" title="ProbabilityDensityFunction">'],
['Pdf', '(Memfunc)', 'href="MEMFUNC_Geometric+_Pdf_23_Pdf.html" title="Constructor for geometric Pdf.">'],
['Pdf', '(Memfunc)', 'href="MEMFUNC_Log-_Normal+_Pdf_23_Pdf.html" title="Constructor for log-normal Pdf. Log-normal PDFs can either be initialized by the mean and standard deviation of the underlying normal distribution or directly of the log-normal distribution.">'],
['Pdf', '(Memfunc)', 'href="MEMFUNC_Normal+_Pdf_23_Pdf.html" title="Constructor for normal Pdf.">'],
['Peptide', '(Shortcut)', 'href="SHORTCUT_Peptide.html" title="A string of Spec.AminoAcid.">'],
['PeptideIterator', '(Shortcut)', 'href="SHORTCUT_Peptide_Iterator.html" title="Iterator for Shortcut.Peptide.">'],
['Pex', '(Spec)', 'href="SPEC_Pex.html" title=" Provides a fast approximate string matching filter that splits the needle into several pieces that are searched with a multiple exact string matching algorithm and later verified.">'],
['PexMultiFinder', '(Metafunction)', 'href="METAFUNCTION_Pex_Multi_Finder.html" title="Determines the multiple exact string matching algorithm used by the Pex algorithm.">'],
['pickRandomNumber', '(Function)', 'href="FUNCTION.pick_Random_Number.html" title="Pick a random number using a random number generator object, possibly following the given distribution.">'],
['Pipe', '(Class)', 'href="CLASS_Pipe.html" title="Pipes are pop-passive pipeline modules.">'],
['Pipe', '(Memfunc)', 'href="MEMFUNC_Filter_23_Pipe.html" title="Constructor">'],
['Pipe', '(Memfunc)', 'href="MEMFUNC_Namer_23_Pipe.html" title="Constructor">'],
['Pipe', '(Memfunc)', 'href="MEMFUNC_Pipe_23_Pipe.html" title="Constructor">'],
['Pizza &amp; Chili Index', '(Demo)', 'href="DEMO_Pizza+_26+_Chili+_Index.html" title="Using a Spec.Pizza & Chili Index for searching and the Spec.Pizza & Chili String for displaying.">'],
['Pizza &amp; Chili Index', '(Spec)', 'href="SPEC_Pizza+_26+_Chili+_Index.html" title="An adapter for the Pizza & Chili index API.">'],
['Pizza &amp; Chili Index Fibres', '(Tag)', 'href="TAG_Pizza+_26+_Chili+_Index+_Fibres.html" title="Tag to select a specific fibre (e.g. table, object, ...) of a Spec.Pizza & Chili Index index.">'],
['Pizza &amp; Chili Index Tags', '(Tag)', 'href="TAG_Pizza+_26+_Chili+_Index+_Tags.html" title="Tag specifying the Pizza & Chili library to use.">'],
['Pizza &amp; Chili String', '(Spec)', 'href="SPEC_Pizza+_26+_Chili+_String.html" title="String used by the Pizza & Chili indices.">'],
['PMode', '(Spec)', 'href="SPEC_P_Mode.html" title=" Represents the P computation scheme for handling &quot;zero&quot; probabilities.">'],
['Pms1', '(Spec)', 'href="SPEC_Pms1.html" title=" Represents the Pms1 algorithm developed by Rajasekaran et al.">'],
['Pmsp', '(Spec)', 'href="SPEC_Pmsp.html" title=" Represents the Pmsp algorithm of Davila et al.">'],
['point', '(Memvar)', 'href="MEMVAR_Point_And_Cargo_23point.html" title="The stored point of type TValue.">'],
['PointAndCargo', '(Class)', 'href="CLASS_Point_And_Cargo.html" title="Simple record class storing a point (one-value interval) and a cargo.">'],
['PointAndCargo', '(Memfunc)', 'href="MEMFUNC_Point_And_Cargo_23_Point_And_Cargo.html" title="Constructor.">'],
['Points Only Tree Node', '(Spec)', 'href="SPEC_Points+_Only+_Tree+_Node.html" title="Spec for IntervalTreeNode that stores only the relevant point in each node meaning the endpoint of the interval in the list sorted by endpoints (list2) and only the beginpoint of the interval in the list sorted by beginpoints (list1).">'],
['Pool', '(Class)', 'href="CLASS_Pool.html" title="Pools are push- and pop-passive pipeline modules.">'],
['PoolConfig', '(Spec)', 'href="SPEC_Pool_Config.html" title="Configuration of Pool.">'],
['PoolConfigSize', '(Spec)', 'href="SPEC_Pool_Config_Size.html" title="Configuration of Pool.">'],
['PoolSpec', '(Spec)', 'href="SPEC_Pool_Spec.html" title="Stores/Retrieves all elements to/from disk.">'],
['pop', '(Function)', 'href="FUNCTION_Priority_Type_23pop.html" title="Deletes item with the highest priority and adjusts the priority queue.">'],
['pop', '(Function)', 'href="FUNCTION.pop.html" title="Pops the first element of the remaining stream.">'],
['posGlobalize', '(Function)', 'href="FUNCTION.pos_Globalize.html" title="Converts a local/global to a global position.">'],
['position', '(Function)', 'href="FUNCTION.position.html" title="Position of an iterator.">'],
['Position', '(Metafunction)', 'href="METAFUNCTION_Position.html" title="Type of an object that represents a position in a container.">'],
['Position Iterator', '(Spec)', 'href="SPEC_Position+_Iterator.html" title="Adapts Metafunction.Position.position to Concept.Rooted Iterator.iterator.">'],
['positionRange', '(Function)', 'href="FUNCTION.position_Range.html" title="Returns a pair of the begin and end position in the haystack or needle for the last hit found.">'],
['positionRangeNoClip', '(Function)', 'href="FUNCTION.position_Range_No_Clip.html" title="Returns a pair of the begin and end position in or beyond the haystack or needle for the last hit found.">'],
['positionToId', '(Function)', 'href="FUNCTION.position_To_Id.html" title="Retrieves the id of a string in the StringSet given a position.">'],
['posLocalize', '(Function)', 'href="FUNCTION.pos_Localize.html" title="Converts a local/global to a local position.">'],
['posLocalToX', '(Function)', 'href="FUNCTION.pos_Local_To_X.html" title="Converts a local to a local/global position.">'],
['posOfMax', '(Function)', 'href="FUNCTION.pos_Of_Max.html" title="Determines the residue position in a given Class.FrequencyDistribution object with the maximum frequency.">'],
['Postorder', '(Tag)', 'href="TAG_Postorder.html" title="Postorder depth-first search.">'],
['PostorderEmptyEdges', '(Tag)', 'href="TAG_Postorder_Empty_Edges.html" title="Postorder depth-first search in a suffix tree with leaves for every suffix.">'],
['prefix', '(Function)', 'href="FUNCTION.prefix.html" title="Creates prefix object.">'],
['Prefix', '(Metafunction)', 'href="METAFUNCTION_Prefix.html" title="Prefix sequence type.">'],
['Prefix Order', '(Tag)', 'href="TAG_Prefix+_Order.html" title="Specify whether less-than or greather-than comparison is meant.">'],
['PrefixSegment', '(Spec)', 'href="SPEC_Prefix_Segment.html" title="First part of a sequence.">'],
['Preorder', '(Tag)', 'href="TAG_Preorder.html" title="Preorder depth-first search.">'],
['PreorderEmptyEdges', '(Tag)', 'href="TAG_Preorder_Empty_Edges.html" title="Preorder depth-first search in a suffix tree with leaves for every suffix.">'],
['prependValue', '(Function)', 'href="FUNCTION.prepend_Value.html" title="Prepend a value to a container.">'],
['Prims Algorithm', '(Demo)', 'href="DEMO_Prims+_Algorithm.html" title="Prim\'s algorithm for computing a minimum spanning tree.">'],
['primsAlgorithm', '(Function)', 'href="FUNCTION.prims_Algorithm.html" title="Computes a minimum spanning tree on a graph.">'],
['printAlignment', '(Function)', 'href="FUNCTION.print_Alignment.html" title="Prints a window of the visible layout of reads into a outstream.">'],
['printDebugLevel', '(Function)', 'href="FUNCTION.print_Debug_Level.html" title="Print the current SeqAn debug level and the compiler flags to the given stream.">'],
['PriorityHeap', '(Spec)', 'href="SPEC_Priority_Heap.html" title="Stores the priority data on a heap.">'],
['PriorityType', '(Class)', 'href="CLASS_Priority_Type.html" title="Stores items in such a way that the item with the highest priority is at the top.">'],
['progressiveAlignment', '(Function)', 'href="FUNCTION.progressive_Alignment.html" title="Performs a progressive alignment.">'],
['Projection', '(Spec)', 'href="SPEC_Projection.html" title=" Represents the PROJECTION algorithm of Buhler and Tompa.">'],
['property', '(Function)', 'href="FUNCTION.property.html" title="Accesses the property of an item in the property map.">'],
['PropertyMap', '(Class)', 'href="CLASS_Property_Map.html" title="Class used to save additional data together with a MemoryManager.">'],
['Proxy', '(Class)', 'href="CLASS_Proxy.html" title="Emulates object of another class.">'],
['Pseudocount', '(Class)', 'href="CLASS_Pseudocount.html" title="Holds the pseudocounts for each residue of a given sequence alphabet.">'],
['push', '(Function)', 'href="FUNCTION_Priority_Type_23push.html" title="Inserts a new item and adjusts the priority queue if necessary.">'],
['push', '(Function)', 'href="FUNCTION.push.html" title="Appends an item at the end of an input stream.">'],
['QGram Index Fibres', '(Tag)', 'href="TAG_Q_Gram+_Index+_Fibres.html" title="Tag to select a specific fibre (e.g. table, object, ...) of a Spec.IndexQGram.q-gram Index.">'],
['qualityValue', '(Function)', 'href="FUNCTION.quality_Value.html" title="Sets the minimum length for a seed to be saved permanently.">'],
['queryName', '(Function)', 'href="FUNCTION.query_Name.html" title="Reference to the name (identifier) of the query in a Blast report.">'],
['queryOrientationPlus', '(Function)', 'href="FUNCTION.query_Orientation_Plus.html" title="Orientation of the query sequence within a Blast HSP alignment.">'],
['range', '(Function)', 'href="FUNCTION.range.html" title="Returns the suffix array interval borders of occurences of Function.representative substring or a q-gram in the index text.">'],
['rawsaAt', '(Function)', 'href="FUNCTION.rawsa_At.html" title="Shortcut for value(indexRawSA(..), ..).">'],
['rawtextAt', '(Function)', 'href="FUNCTION.rawtext_At.html" title="Shortcut for value(indexRawText(..), ..).">'],
['read', '(Function)', 'href="FUNCTION_Fileformat_23read.html" title="Loads a record from file.">'],
['read', '(Function)', 'href="FUNCTION.read.html" title="Loads records from a file.">'],
['read', '(Memfunc)', 'href="MEMFUNC_Markov_Model_23read.html" title=" Loads an instance of MarkovModel from a file">'],
['readAt', '(Function)', 'href="FUNCTION.read_At.html" title="Loads records from a specific position in a file.">'],
['readFeature', '(Function)', 'href="FUNCTION.read_Feature.html" title="Finds the first feature specified by \'key\' starting from position \'start\' in the feature table (the feature table can be obtained by calling readLineType with the two-character code &quot;FT&quot;).">'],
['readId', '(Memvar)', 'href="MEMVAR_Aligned_Read_Store_Element_23read_Id.html" title="Refers to the aligned read in the Memvar.FragmentStore#readStore.">'],
['readId[2]', '(Memvar)', 'href="MEMVAR_Mate_Pair_Store_Element_23read_Id[2].html" title="Refers to two paired reads in the Memvar.FragmentStore#readStore or contains INVALID_ID values.">'],
['readLineType', '(Function)', 'href="FUNCTION.read_Line_Type.html" title="Reads the information belonging to the two-character line code specified.">'],
['readMeta', '(Function)', 'href="FUNCTION.read_Meta.html" title="Read meta information from file.">'],
['readNameStore', '(Memvar)', 'href="MEMVAR_Fragment_Store_23read_Name_Store.html" title="String that maps from readId to readName.">'],
['readSeqStore', '(Memvar)', 'href="MEMVAR_Fragment_Store_23read_Seq_Store.html" title="String that maps from readId to readSeq.">'],
['readStore', '(Memvar)', 'href="MEMVAR_Fragment_Store_23read_Store.html" title="String that maps from readId to &lt;matePairId>.">'],
['ReadStoreElement', '(Class)', 'href="CLASS_Read_Store_Element.html" title="Represents a single read (without sequence).">'],
['ReadStoreElement', '(Memfunc)', 'href="MEMFUNC_Read_Store_Element_23_Read_Store_Element.html" title="Constructor">'],
['reAlign', '(Function)', 'href="FUNCTION.re_Align.html" title="Perform realignment similar to Anson-Myers algorithm.">'],
['Reference', '(Metafunction)', 'href="METAFUNCTION_Reference.html" title="Reference type.">'],
['refresh', '(Function)', 'href="FUNCTION.refresh.html" title="Recreate a name store cache.">'],
['releaseAll', '(Function)', 'href="FUNCTION.release_All.html" title="Releases all ids handled by this id manager at once.">'],
['releaseID', '(Function)', 'href="FUNCTION.release_I_D.html" title=" Releases a given id so it can be redistributed later on.">'],
['releaseId', '(Function)', 'href="FUNCTION.release_Id.html" title="Releases a given id so it can be redistributed later on.">'],
['removeAllChildren', '(Function)', 'href="FUNCTION.remove_All_Children.html" title="Removes all children from the tree given a parent.">'],
['removeChild', '(Function)', 'href="FUNCTION.remove_Child.html" title="Removes a child from the tree given a parent.">'],
['removeEdge', '(Function)', 'href="FUNCTION.remove_Edge.html" title="Removes an edge from the graph. For automatons a label is required.">'],
['removeGap', '(Function)', 'href="FUNCTION.remove_Gap.html" title="Removes one blank from a gapped sequence.">'],
['removeGaps', '(Function)', 'href="FUNCTION.remove_Gaps.html" title="Removes blanks from a gapped sequence.">'],
['removeInEdges', '(Function)', 'href="FUNCTION.remove_In_Edges.html" title="Removes the incoming edges of a given vertex.">'],
['removeOutEdges', '(Function)', 'href="FUNCTION.remove_Out_Edges.html" title="Removes the outgoing edges of a given vertex.">'],
['removeValueById', '(Function)', 'href="FUNCTION.remove_Value_By_Id.html" title="Removes a string from the StringSet given an id.">'],
['removeVertex', '(Function)', 'href="FUNCTION.remove_Vertex.html" title="Removes a vertex.">'],
['replace', '(Function)', 'href="FUNCTION.replace.html" title="Replaces a part of a container with another container.">'],
['repLength', '(Function)', 'href="FUNCTION.rep_Length.html" title="Returns the length of the substring representing the path from root to iterator node.">'],
['representative', '(Function)', 'href="FUNCTION.representative.html" title="Returns a substring representing the path from root to iterator node.">'],
['requiredArguments', '(Function)', 'href="FUNCTION.required_Arguments.html" title="Sets the number of arguments (non-parameterized options) are required by the program.">'],
['reserve', '(Function)', 'href="FUNCTION.reserve.html" title="Increases the capacity.">'],
['resize', '(Function)', 'href="FUNCTION.resize.html" title="Resizes a container. If the new length exceeds the old length the new elements are filled with copies of value.">'],
['resizeEdgeMap', '(Function)', 'href="FUNCTION.resize_Edge_Map.html" title="Initializes an edge map">'],
['resizeSpace', '(Function)', 'href="FUNCTION.resize_Space.html" title="Makes free space in container">'],
['resizeVertexMap', '(Function)', 'href="FUNCTION.resize_Vertex_Map.html" title="Initializes a vertex map.">'],
['reverse', '(Function)', 'href="FUNCTION.reverse.html" title="Reverse an object/container in-place.">'],
['reverseComplement', '(Function)', 'href="FUNCTION.reverse_Complement.html" title="Reverse and complement a sequence or a Class.StringSet in-place.">'],
['rewind', '(Function)', 'href="FUNCTION.rewind.html" title="Sets the current file pointer to the beginning.">'],
['rightBoundary', '(Function)', 'href="FUNCTION.right_Boundary.html" title="Access to the right boundary.">'],
['rightDiagonal', '(Function)', 'href="FUNCTION.right_Diagonal.html" title=" Returns the most right diagonal of the seed (minimum diagonal value).">'],
['rightDim0', '(Function)', 'href="FUNCTION.right_Dim0.html" title=" Returns the last position of the seed in the query.">'],
['rightDim1', '(Function)', 'href="FUNCTION.right_Dim1.html" title=" Returns the last position of the seed in the database.">'],
['rightPosition', '(Function)', 'href="FUNCTION.right_Position.html" title="The end position of segment in a seed.">'],
['Rna', '(Spec)', 'href="SPEC_Rna.html" title="Alphabet for RNA.">'],
['Rna5', '(Spec)', 'href="SPEC_Rna5.html" title="Alphabet for RNA including \'N\' character.">'],
['Rna5Iterator', '(Shortcut)', 'href="SHORTCUT_Rna5_Iterator.html" title="Iterator for Shortcut.Rna5String.">'],
['Rna5String', '(Shortcut)', 'href="SHORTCUT_Rna5_String.html" title="A string of Spec.Rna5.">'],
['Rna5StringComplement', '(Shortcut)', 'href="SHORTCUT_Rna5_String_Complement.html" title="Modifier for the complement of a Shortcut.Rna5String.">'],
['Rna5StringReverse', '(Shortcut)', 'href="SHORTCUT_Rna5_String_Reverse.html" title="Modifier for the reverse of a Shortcut.Rna5String.">'],
['Rna5StringReverseComplement', '(Shortcut)', 'href="SHORTCUT_Rna5_String_Reverse_Complement.html" title="Modifier for the reverse complement of a Shortcut.Rna5String.">'],
['RnaIterator', '(Shortcut)', 'href="SHORTCUT_Rna_Iterator.html" title="Iterator for Shortcut.RnaString.">'],
['RnaString', '(Shortcut)', 'href="SHORTCUT_Rna_String.html" title="A string of Spec.Rna.">'],
['RnaStringComplement', '(Shortcut)', 'href="SHORTCUT_Rna_String_Complement.html" title="Modifier for the complement of a Shortcut.RnaString.">'],
['RnaStringReverse', '(Shortcut)', 'href="SHORTCUT_Rna_String_Reverse.html" title="Modifier for the reverse of a Shortcut.RnaString.">'],
['RnaStringReverseComplement', '(Shortcut)', 'href="SHORTCUT_Rna_String_Reverse_Complement.html" title="Modifier for the reverse complement of a Shortcut.RnaString.">'],
['Rng', '(Class)', 'href="CLASS_Rng.html" title="Random Number Generator">'],
['Rng', '(Memfunc)', 'href="MEMFUNC_Mersenne+_Twister+_Rng_23_Rng.html" title="Constructor Mersenne Twister Rng.">'],
['Rng', '(Memfunc)', 'href="MEMFUNC_Rng+_Functor_23_Rng.html" title="Constructor Functor Rng.">'],
['Rng Functor', '(Spec)', 'href="SPEC_Rng+_Functor.html" title="Functor wrapper for random number generation.">'],
['root', '(Function)', 'href="FUNCTION.root.html" title="Gets a reference to the root of the tree.">'],
['Rooted Iterator', '(Concept)', 'href="CONCEPT_Rooted+_Iterator.html" title="Iterator that knows its container.">'],
['Rooted Iterators', '(Demo)', 'href="DEMO_Rooted+_Iterators.html" title="Example for some functions for handling (rooted) iterators.">'],
['row', '(Function)', 'href="FUNCTION.row.html" title="A row in an alignment.">'],
['Row', '(Metafunction)', 'href="METAFUNCTION_Row.html" title="Type of a row in an alignment.">'],
['rows', '(Function)', 'href="FUNCTION.rows.html" title="The container of rows in an alignment.">'],
['Rows', '(Metafunction)', 'href="METAFUNCTION_Rows.html" title="Type of row container of an alignment.">'],
['saAt', '(Function)', 'href="FUNCTION.sa_At.html" title="Shortcut for value(indexSA(..), ..).">'],
['Sampler', '(Spec)', 'href="SPEC_Sampler.html" title="Outputs m-tuples beginning at a position of difference cover DC.">'],
['SAValue', '(Metafunction)', 'href="METAFUNCTION_S_A_Value.html" title="The default alphabet type of a suffix array, i.e. the type to store a position of a string or string set.">'],
['Score', '(Class)', 'href="CLASS_Score.html" title="A scoring scheme.">'],
['score', '(Function)', 'href="FUNCTION.score.html" title="Returns the score for aligning the characters seq1[pos1] and seq2[pos2]. This function allows to define a position-dependent scoring scheme.">'],
['Score', '(Memfunc)', 'href="MEMFUNC_Score+_Matrix_23_Score.html" title="Constructor.">'],
['Score', '(Memfunc)', 'href="MEMFUNC_Score_23_Score.html" title="Constructor">'],
['score', '(Memvar)', 'href="MEMVAR_Align_Quality_Store_Element_23score.html" title="Score of the alignment.">'],
['Score ChainSoP', '(Spec)', 'href="SPEC_Score+_Chain_So_P.html" title="Scoring scheme for chaining that uses a special method for scoring the gaps between two fragments.">'],
['Score Manhattan', '(Spec)', 'href="SPEC_Score+_Manhattan.html" title="Scoring scheme for chaining that computes gap scores using manhattan distance.">'],
['Score Matrix', '(Spec)', 'href="SPEC_Score+_Matrix.html" title="A general scoring matrix.">'],
['Score Zero', '(Spec)', 'href="SPEC_Score+_Zero.html" title="Scoring scheme for chaining that set gap scores to 0">'],
['Scored SeedSet', '(Spec)', 'href="SPEC_Scored+_Seed_Set.html" title="SeedSet that uses scored Seeds.">'],
['scoreGap', '(Function)', 'href="FUNCTION.score_Gap.html" title="Score for gaps.">'],
['scoreGapExtend', '(Function)', 'href="FUNCTION.score_Gap_Extend.html" title="Score for extending gaps.">'],
['scoreGapExtendHorizontal', '(Function)', 'href="FUNCTION.score_Gap_Extend_Horizontal.html" title="Returns the score for extending a horizontal gap after pos1 in seq1.">'],
['scoreGapExtendVertical', '(Function)', 'href="FUNCTION.score_Gap_Extend_Vertical.html" title="Returns the score for extending a vertical gap after pos2 in seq2.">'],
['scoreGapHorizontal', '(Function)', 'href="FUNCTION.score_Gap_Horizontal.html" title="Returns the score for a horizontal gap after pos1 in seq1.">'],
['scoreGapOpen', '(Function)', 'href="FUNCTION.score_Gap_Open.html" title="Score for opening a gap.">'],
['scoreGapOpenHorizontal', '(Function)', 'href="FUNCTION.score_Gap_Open_Horizontal.html" title="Returns the score for opening a horizontal gap after pos1 in seq1.">'],
['scoreGapOpenVertical', '(Function)', 'href="FUNCTION.score_Gap_Open_Vertical.html" title="Returns the score for opening a vertical gap after pos2 in seq2.">'],
['scoreGapVertical', '(Function)', 'href="FUNCTION.score_Gap_Vertical.html" title="Returns the score for a vertical gap after pos2 in seq2.">'],
['scoreLimit', '(Function)', 'href="FUNCTION.score_Limit.html" title="The minimal score a match must reach in approximate searching.">'],
['scoreMatch', '(Function)', 'href="FUNCTION.score_Match.html" title="Match score.">'],
['scoreMismatch', '(Function)', 'href="FUNCTION.score_Mismatch.html" title="Mismatch score.">'],
['scoreSeed', '(Function)', 'href="FUNCTION.score_Seed.html" title=" Calculates the score of a seed.">'],
['scoringScheme', '(Function)', 'href="FUNCTION.scoring_Scheme.html" title="The glos:scoring scheme used for finding or aligning.">'],
['ScoringScheme', '(Metafunction)', 'href="METAFUNCTION_Scoring_Scheme.html" title="Returns the scoring scheme of an approximate searching algorithm.">'],
['Seed', '(Class)', 'href="CLASS_Seed.html" title="Describes a seed.">'],
['Seed', '(Memfunc)', 'href="MEMFUNC_Chained_Seed_23_Seed.html" title="Constructor">'],
['Seed', '(Memfunc)', 'href="MEMFUNC_Simple_Seed_23_Seed.html" title="Constructor">'],
['Seed Adding', '(Tag)', 'href="TAG_Seed+_Adding.html" title="The algorithm used to add a seed to a SeedSet.">'],
['Seed Extension', '(Tag)', 'href="TAG_Seed+_Extension.html" title="The algorithms used to extend a seed.">'],
['seedScore', '(Function)', 'href="FUNCTION.seed_Score.html" title="Returns the score of a seed.">'],
['SeedSet', '(Class)', 'href="CLASS_Seed_Set.html" title="Manages seeds for local chaining and merging algorithms.">'],
['SeedSet', '(Memfunc)', 'href="MEMFUNC_Seed_Set_23_Seed_Set.html" title="Constructor">'],
['SeedSet', '(Tag)', 'href="TAG_Seed_Set.html" title=" Tags for the behaviour of a SeedSet">'],
['seek', '(Function)', 'href="FUNCTION.seek.html" title="Changes the current file pointer.">'],
['Segment', '(Class)', 'href="CLASS_Segment.html" title="A contiguous part of a sequence.">'],
['Segment', '(Memfunc)', 'href="MEMFUNC_Infix_Segment_23_Segment.html" title="Constructor">'],
['Segment', '(Memfunc)', 'href="MEMFUNC_Prefix_Segment_23_Segment.html" title="Constructor">'],
['Segment', '(Memfunc)', 'href="MEMFUNC_Suffix_Segment_23_Segment.html" title="Constructor">'],
['Segment Match Generation', '(Tag)', 'href="TAG_Segment+_Match+_Generation.html" title="A tag that specifies how to generate segment matches.">'],
['seq', '(Memvar)', 'href="MEMVAR_Contig_Store_Element_23seq.html" title="Contig sequence.">'],
['SeqAn - The Library for Sequence Analysis - Documentation', '', '<a target=_parent href="index.html">'],
['seqPos', '(Memvar)', 'href="MEMVAR_Gap_Anchor_23seq_Pos.html" title="Sequence character position in the ungapped sequence.">'],
['sequenceId', '(Function)', 'href="FUNCTION.sequence_Id.html" title="Gets the sequence id that is associated with this vertex descriptor or with a sequence of a fragment.">'],
['set', '(Function)', 'href="FUNCTION.set.html" title="Assigns one object to another object avoiding to copy contents.">'],
['set', '(Memfunc)', 'href="MEMFUNC_Markov_Model_23set.html" title=" Given e transition matrix, sets it as transition matrix of the MarkovModel and computes (if it is not available) the  vector of character distributions and the auxiliary information">'],
['setBegin', '(Function)', 'href="FUNCTION.set_Begin.html" title="Sets begin of object in host.">'],
['setBeginPosition', '(Function)', 'href="FUNCTION.set_Begin_Position.html" title="Sets begin position of object in host.">'],
['setDefaultScoreMatrix', '(Function)', 'href="FUNCTION.set_Default_Score_Matrix.html" title="Set the value of the given matrix to the default value.">'],
['setEnd', '(Function)', 'href="FUNCTION.set_End.html" title="Sets end of object in host.">'],
['setEndPosition', '(Function)', 'href="FUNCTION.set_End_Position.html" title="Sets begin position of object in host.">'],
['setEof', '(Function)', 'href="FUNCTION.set_Eof.html" title="Sets the file end to the current pointer.">'],
['setHaystack', '(Function)', 'href="FUNCTION.set_Haystack.html" title="Sets the haystack of a Class.Finder object.">'],
['setHelpText', '(Function)', 'href="FUNCTION.set_Help_Text.html" title="Sets the help text associated with the Class.CommandLineOption object.">'],
['SetHorspool', '(Spec)', 'href="SPEC_Set_Horspool.html" title=" Multiple exact string matching using set horspool algorithm.">'],
['setHost', '(Function)', 'href="FUNCTION.set_Host.html" title="Sets the host of an object.">'],
['setLeftDiagonal', '(Function)', 'href="FUNCTION.set_Left_Diagonal.html" title=" Sets a new value for the most left diagonal.">'],
['setLeftDim0', '(Function)', 'href="FUNCTION.set_Left_Dim0.html" title=" Updates the start point of the seed.">'],
['setLeftDim1', '(Function)', 'href="FUNCTION.set_Left_Dim1.html" title=" Updates the start point of the seed.">'],
['setLeftPosition', '(Function)', 'href="FUNCTION.set_Left_Position.html" title="Sets begin position of segment in a seed.">'],
['setLongName', '(Function)', 'href="FUNCTION.set_Long_Name.html" title="Sets the long-name of a Class.CommandLineOption object.">'],
['setMaximumDistance', '(Function)', 'href="FUNCTION.set_Maximum_Distance.html" title="Sets the maximal distance between two seed during a chaining process.">'],
['setNeedle', '(Function)', 'href="FUNCTION.set_Needle.html" title="Sets the needle of a Class.Pattern object and optionally induces preprocessing.">'],
['setOptionType', '(Function)', 'href="FUNCTION.set_Option_Type.html" title="Set the option type.">'],
['setPosition', '(Function)', 'href="FUNCTION.set_Position.html" title="Sets the position of a finder.">'],
['setQualityValue', '(Function)', 'href="FUNCTION.set_Quality_Value.html" title="Sets the minimum length for a seed to be saved permanently.">'],
['setRightDiagonal', '(Function)', 'href="FUNCTION.set_Right_Diagonal.html" title=" Sets a new value for the most right diagonal.">'],
['setRightDim0', '(Function)', 'href="FUNCTION.set_Right_Dim0.html" title=" Updates the end point of the seed.">'],
['setRightDim1', '(Function)', 'href="FUNCTION.set_Right_Dim1.html" title=" Updates the end point of the seed.">'],
['setRightPosition', '(Function)', 'href="FUNCTION.set_Right_Position.html" title="Sets end position of segment in a seed.">'],
['setScore', '(Function)', 'href="FUNCTION.set_Score.html" title="Set the substitution score between two values.">'],
['setScoreGap', '(Function)', 'href="FUNCTION.set_Score_Gap.html" title="Set gap opening and extension score.">'],
['setScoreGapExtend', '(Function)', 'href="FUNCTION.set_Score_Gap_Extend.html" title="Set gap extension score.">'],
['setScoreGapOpen', '(Function)', 'href="FUNCTION.set_Score_Gap_Open.html" title="Set gap opening score.">'],
['setScoreLimit', '(Function)', 'href="FUNCTION.set_Score_Limit.html" title="Sets the minimal score a match must reach in approximate searching.">'],
['setScoreMatch', '(Function)', 'href="FUNCTION.set_Score_Match.html" title="Set match score.">'],
['setScoreMismatch', '(Function)', 'href="FUNCTION.set_Score_Mismatch.html" title="Set mismatch score.">'],
['setScoringScheme', '(Function)', 'href="FUNCTION.set_Scoring_Scheme.html" title="Sets the glos:scoring scheme used for finding or aligning.">'],
['setShortName', '(Function)', 'href="FUNCTION.set_Short_Name.html" title="Sets the short-name of a Class.CommandLineOption object.">'],
['setSource', '(Function)', 'href="FUNCTION.set_Source.html" title="Let an external object be the source.">'],
['setStepSize', '(Function)', 'href="FUNCTION.set_Step_Size.html" title="Change the q-gram step size used for index creation.">'],
['setStrings', '(Function)', 'href="FUNCTION.set_Strings.html" title="Loads the sequences of a stringset into an alignment.">'],
['setValue', '(Function)', 'href="FUNCTION.set_Value.html" title="Makes holder dependent.">'],
['Shape', '(Class)', 'href="CLASS_Shape.html" title="Stores hash value and shape for an ungapped or gapped q-gram.">'],
['Shape', '(Memfunc)', 'href="MEMFUNC_Generic_Shape_23_Shape.html" title="Constructor">'],
['Shape', '(Memfunc)', 'href="MEMFUNC_One_Gapped_Shape_23_Shape.html" title="Constructor">'],
['Shape', '(Memfunc)', 'href="MEMFUNC_Shape_23_Shape.html" title="Constructor">'],
['Shape', '(Memfunc)', 'href="MEMFUNC_Simple_Shape_23_Shape.html" title="Constructor">'],
['shapeToString', '(Function)', 'href="FUNCTION.shape_To_String.html" title="Converts a given shape into a sequence of \'1\' (relevant position) and \'0\' (irrelevant position).">'],
['shareResources', '(Function)', 'href="FUNCTION.share_Resources.html" title="Determines whether two sequences share the same resource.">'],
['ShiftAnd', '(Spec)', 'href="SPEC_Shift_And.html" title=" Exact string matching using bit parallelism. The Shift-And algorithm is applicable to search small patterns in texts using a small alphabet.">'],
['Shifter', '(Spec)', 'href="SPEC_Shifter.html" title="Shifts the input stream by delta elements.">'],
['ShiftOr', '(Spec)', 'href="SPEC_Shift_Or.html" title=" Exact string matching using bit parallelism. The Shift-Or algorithm is applicable to search small patterns in texts using a small alphabet.">'],
['Shortcuts', '', '<a target=_parent href="INDEXPAGE_Shortcut.html">'],
['Shortest Path in DAGs', '(Demo)', 'href="DEMO_Shortest+_Path+in+_D_A_Gs.html" title="Computing single source shortest paths in a directed acyclic graph.">'],
['shortHelp', '(Function)', 'href="FUNCTION.short_Help.html" title="Prints a short help message for the parser to a stream">'],
['shortName', '(Function)', 'href="FUNCTION.short_Name.html" title="Returns the short-name of a Class.CommandLineOption object.">'],
['shrinkToFit', '(Function)', 'href="FUNCTION.shrink_To_Fit.html" title="Resizes container to minimum capacity">'],
['shuffle', '(Function)', 'href="FUNCTION.shuffle.html" title="Shuffle the given container.">'],
['silentStatus', '(Function)', 'href="FUNCTION.silent_Status.html" title="Reference to the silent status of a state.">'],
['Simple', '(Tag)', 'href="TAG_Simple.html" title="Tag for the Class.Score to mark it as a simple score.">'],
['Simple Allocator', '(Spec)', 'href="SPEC_Simple+_Allocator.html" title="General purpose allocator.">'],
['Simple Finder', '(Spec)', 'href="SPEC_Simple+_Finder.html" title="A brute force online searching algorithm.">'],
['Simple Score', '(Spec)', 'href="SPEC_Simple+_Score.html" title="Simple scoring scheme that has scores for matches, mismatches, opening gaps and extending gaps.">'],
['Simple Type', '(Concept)', 'href="CONCEPT_Simple+_Type.html" title="Object that does not need constructors, destructors or copy assignment operators.">'],
['SimpleIterator', '(Spec)', 'href="SPEC_Simple_Iterator.html" title="A simple iterator.">'],
['SimpleScore', '(Shortcut)', 'href="SHORTCUT_Simple_Score.html" title="Simple scoring scheme.">'],
['SimpleSeed', '(Spec)', 'href="SPEC_Simple_Seed.html" title="Describes a seed with start and end position and diagonal upper and lower bounds.">'],
['SimpleShape', '(Spec)', 'href="SPEC_Simple_Shape.html" title="A variable length ungapped shape (also called q-gram or k-mer).">'],
['SimpleType', '(Class)', 'href="CLASS_Simple_Type.html" title="Implementation for &quot;simple&quot; types.">'],
['Single Pool Allocator', '(Spec)', 'href="SPEC_Single+_Pool+_Allocator.html" title="Allocator that pools memory blocks of specific size.">'],
['size', '(Function)', 'href="FUNCTION.size.html" title="Gets the file size.">'],
['Size', '(Metafunction)', 'href="METAFUNCTION_Size.html" title="Type of an object that is suitable to hold size information.">'],
['Skiplist', '(Spec)', 'href="SPEC_Skiplist.html" title="General purpose map container.">'],
['slowNjTree', '(Function)', 'href="FUNCTION.slow_Nj_Tree.html" title="Computes a guide tree from a distance matrix.">'],
['sortAlignedRead Tags', '(Tag)', 'href="TAG.sort_Aligned_Read+_Tags.html" title="Tag to select a specific field to stably sort the Memvar.FragmentStore#alignedReadStore by.">'],
['sortAlignedReads', '(Function)', 'href="FUNCTION.sort_Aligned_Reads.html" title="Stably sort aligned reads.">'],
['SorterConfig', '(Spec)', 'href="SPEC_Sorter_Config.html" title="Configuration of Sorter.">'],
['SorterConfigSize', '(Spec)', 'href="SPEC_Sorter_Config_Size.html" title="Configuration of Sorter.">'],
['SorterSpec', '(Spec)', 'href="SPEC_Sorter_Spec.html" title="Sorts all elements using a custom compare function.">'],
['source', '(Function)', 'href="FUNCTION.source.html" title="The source of an object.">'],
['Source', '(Metafunction)', 'href="METAFUNCTION_Source.html" title="The underlying sequence for alignments or gaps data structures.">'],
['Source', '(Spec)', 'href="SPEC_Source.html" title="Pipelining adaptor for arbitrary containers or iterators.">'],
['sourceBegin', '(Function)', 'href="FUNCTION.source_Begin.html" title="Begin of the source segment.">'],
['sourceEnd', '(Function)', 'href="FUNCTION.source_End.html" title="End of the source segment.">'],
['sourceLength', '(Function)', 'href="FUNCTION.source_Length.html" title="Length of the source.">'],
['sourceSegment', '(Function)', 'href="FUNCTION.source_Segment.html" title="The used part of the source.">'],
['sourceVertex', '(Function)', 'href="FUNCTION.source_Vertex.html" title="Returns the source vertex of an edge.">'],
['Spec', '(Metafunction)', 'href="METAFUNCTION_Spec.html" title="The spec of a class.">'],
['Specializations', '', '<a target=_parent href="INDEXPAGE_Spec.html">'],
['split', '(Function)', 'href="FUNCTION.split.html" title="Divides the contents of a sequence file into sequence file fragments separated by a file format specific delimiter.">'],
['startDiagonal', '(Function)', 'href="FUNCTION.start_Diagonal.html" title=" Returns the diagonal of the start point.">'],
['stationaryDistribution', '(Memvar)', 'href="MEMVAR_Markov_Model_23stationary_Distribution.html" title="The vector of character distribution">'],
['std', '(Memvar)', 'href="MEMVAR_Library_Store_Element_23std.html" title="The library size standard deviation.">'],
['std::basic_string', '(Adaption)', 'href="ADAPTION.std_3a_3abasic__string.html" title="Adaption for STL strings.">'],
['std::FILE *', '(Adaption)', 'href="ADAPTION.std_3a_3a_F_I_L_E+_2a.html" title="Standard library C style streams.">'],
['std::iostream', '(Adaption)', 'href="ADAPTION.std_3a_3aiostream.html" title="Standard library stream classes.">'],
['std::list', '(Adaption)', 'href="ADAPTION.std_3a_3alist.html" title="Adaption for STL list objects.">'],
['std::vector', '(Adaption)', 'href="ADAPTION.std_3a_3avector.html" title="Adaption for STL vector class.">'],
['StdContainerIterator', '(Metafunction)', 'href="METAFUNCTION_Std_Container_Iterator.html" title="Returns type of the STL container iterator.">'],
['StoreReport', '(Spec)', 'href="SPEC_Store_Report.html" title="BlastReport specialization. Parses a Blast report and stores all hits and HSPs.">'],
['StreamReport', '(Spec)', 'href="SPEC_Stream_Report.html" title="BlastReport specialization that works on a file stream (parses hits/HSPs when iterating over them).">'],
['String', '(Class)', 'href="CLASS_String.html" title="General purpose container for sequences.">'],
['String', '(Memfunc)', 'href="MEMFUNC_Ext_String_23_String.html" title="Constructor">'],
['String Basics', '(Demo)', 'href="DEMO_String+_Basics.html" title="See our Wiki for Basic demos.">'],
['StringSet', '(Class)', 'href="CLASS_String_Set.html" title="A container class for a set of strings.">'],
['stringSet', '(Function)', 'href="FUNCTION.string_Set.html" title="Gets the string set of an alignment graph.">'],
['stringSetLimits', '(Function)', 'href="FUNCTION.string_Set_Limits.html" title="Retrieves a string of delimiter positions of a Class.StringSet which is needed for local&lt;->global position conversions.">'],
['StringSetType', '(Metafunction)', 'href="METAFUNCTION_String_Set_Type.html" title="Return type of Function.stringSet function.">'],
['stringToShape', '(Function)', 'href="FUNCTION.string_To_Shape.html" title="Takes a shape given as a string of \'1\' (relevant position) and \'0\' (irrelevant position) and converts it into a Shape object.">'],
['Striped', '(Spec)', 'href="SPEC_Striped.html" title="Stripes a file across multiple files.">'],
['Strongly Connected Components', '(Demo)', 'href="DEMO_Strongly+_Connected+_Components.html" title="Computing all strongly-connected-components of a graph.">'],
['stronglyConnectedComponents', '(Function)', 'href="FUNCTION.strongly_Connected_Components.html" title="Decomposes a directed graph into its strongly connected components.">'],
['suffix', '(Function)', 'href="FUNCTION.suffix.html" title="Creates suffix object.">'],
['Suffix', '(Metafunction)', 'href="METAFUNCTION_Suffix.html" title="Suffix sequence type.">'],
['Suffix Array', '(Demo)', 'href="DEMO_Suffix+_Array.html" title="Example for how to create a suffix array and use it as a dictionary.">'],
['SuffixSegment', '(Spec)', 'href="SPEC_Suffix_Segment.html" title="End part segment of a sequence.">'],
['sum', '(Function)', 'href="FUNCTION.sum.html" title="Determines the sum of all frequencies in a given Class.FrequencyDistribution object.">'],
['SumlistGaps', '(Spec)', 'href="SPEC_Sumlist_Gaps.html" title="Stores gaps in a Sumlist.">'],
['sumOfPairsScore', '(Function)', 'href="FUNCTION.sum_Of_Pairs_Score.html" title="Given a multiple alignment, this function calculates the sum-of-pairs score.">'],
['Supermaximal Repeats', '(Demo)', 'href="DEMO_Supermaximal+_Repeats.html" title="Example for using the Spec.SuperMaxRepeats Iterator.">'],
['SuperMaxRepeats Iterator', '(Spec)', 'href="SPEC_Super_Max_Repeats+_Iterator.html" title="Iterator to search for all supermaximal repeats.">'],
['SuperMaxRepeatsFast Iterator', '(Spec)', 'href="SPEC_Super_Max_Repeats_Fast+_Iterator.html" title="Iterator to search for all supermaximal repeats (for enh. suffix arrays only).">'],
['supremumValueImpl', '(Function)', 'href="FUNCTION.supremum_Value_Impl.html" title="Implements Function.maxValue.">'],
['swap', '(Function)', 'href="FUNCTION.swap.html" title="Swaps the contents of two values.">'],
['Swift', '(Spec)', 'href="SPEC_Swift.html" title="Provides a fast filter alogrithm that guarantees to find all regions overlapping with potential \\epsilon-matches. An \\epsilon-match is a matching region of minimal length and an error rate of at most \\epsilon.">'],
['SwiftLocal', '(Spec)', 'href="SPEC_Swift_Local.html" title="The specialization for the general swift filter that finds epsilon matches between haystack and needle.">'],
['SwiftSemiGlobal', '(Spec)', 'href="SPEC_Swift_Semi_Global.html" title="The specialization for the semi-global swift filter that finds regions of the haystack where a needle matches with an error rate less than \\epsilon.">'],
['Sync', '(Spec)', 'href="SPEC_Sync.html" title="File structure supporting synchronous input/output access.">'],
['sysTime', '(Function)', 'href="FUNCTION.sys_Time.html" title="Returns the system time in seconds.">'],
['tagId', '(Memvar)', 'href="MEMVAR_Tag_Selector_23tag_Id.html" title="Stores the index of a Page.Glossary.Tag in the tag list.">'],
['TagList', '(Tag)', 'href="TAG_Tag_List.html" title="A structure to represent a list of tags.">'],
['Tags', '', '<a target=_parent href="INDEXPAGE_Tag.html">'],
['TagSelector', '(Class)', 'href="CLASS_Tag_Selector.html" title="A structure to select a tag from a Tag.TagList.">'],
['TAlignedReadStore', '(Typedef)', 'href="TYPEDEF_Fragment_Store_23_T_Aligned_Read_Store.html" title="Type of the alignedReadStore member.">'],
['TAlignedReadTagStore', '(Typedef)', 'href="TYPEDEF_Fragment_Store_23_T_Aligned_Read_Tag_Store.html" title="Type of the alignedReadTagStore member.">'],
['TAlignQualityStore', '(Typedef)', 'href="TYPEDEF_Fragment_Store_23_T_Align_Quality_Store.html" title="Type of the alignQualityStore member.">'],
['TAnnotationNameStore', '(Typedef)', 'href="TYPEDEF_Fragment_Store_23_T_Annotation_Name_Store.html" title="Type of the annotationNameStore member.">'],
['TAnnotationStore', '(Typedef)', 'href="TYPEDEF_Fragment_Store_23_T_Annotation_Store.html" title="Type of the annotationStore member.">'],
['target', '(Function)', 'href="FUNCTION.target.html" title="Accesses the target of an EdgeStump.">'],
['targetVertex', '(Function)', 'href="FUNCTION.target_Vertex.html" title="Returns the target vertex of an edge.">'],
['Tcm', '(Tag)', 'href="TAG_Tcm.html" title="Represents the Two-Component-Mixture Sequence model.">'],
['TContigFileStore', '(Typedef)', 'href="TYPEDEF_Fragment_Store_23_T_Contig_File_Store.html" title="Type of the contigFileStore member.">'],
['TContigNameStore', '(Typedef)', 'href="TYPEDEF_Fragment_Store_23_T_Contig_Name_Store.html" title="Type of the contigNameStore member.">'],
['TContigSeq', '(Typedef)', 'href="TYPEDEF_Contig_Store_Element_23_T_Contig_Seq.html" title="Type of the seq member.">'],
['TContigStore', '(Typedef)', 'href="TYPEDEF_Fragment_Store_23_T_Contig_Store.html" title="Type of the contigStore member.">'],
['tell', '(Function)', 'href="FUNCTION.tell.html" title="Gets the current file pointer.">'],
['textAt', '(Function)', 'href="FUNCTION.text_At.html" title="Shortcut for value(indexText(..), ..).">'],
['TGapAnchors', '(Typedef)', 'href="TYPEDEF_Aligned_Read_Store_Element_23_T_Gap_Anchors.html" title="Type of the gaps member.">'],
['TGapAnchors', '(Typedef)', 'href="TYPEDEF_Contig_Store_Element_23_T_Gap_Anchors.html" title="Type of the gaps member.">'],
['TLibraryNameStore', '(Typedef)', 'href="TYPEDEF_Fragment_Store_23_T_Library_Name_Store.html" title="Type of the libraryNameStore member.">'],
['TLibraryStore', '(Typedef)', 'href="TYPEDEF_Fragment_Store_23_T_Library_Store.html" title="Type of the libraryStore member.">'],
['TMatePairNameStore', '(Typedef)', 'href="TYPEDEF_Fragment_Store_23_T_Mate_Pair_Name_Store.html" title="Type of the matePairNameStore member.">'],
['TMatePairStore', '(Typedef)', 'href="TYPEDEF_Fragment_Store_23_T_Mate_Pair_Store.html" title="Type of the matePairStore member.">'],
['toCString', '(Function)', 'href="FUNCTION.to_C_String.html" title="Access sequence as c-style string.">'],
['toLower', '(Function)', 'href="FUNCTION.to_Lower.html" title="Convert characters in sequence or Class.StringSet to lower case in-place.">'],
['top', '(Function)', 'href="FUNCTION_Priority_Type_23top.html" title="Reference to the item with the highest priority.">'],
['TopDown Iterator', '(Spec)', 'href="SPEC_Top_Down+_Iterator.html" title="Iterator for suffix trees that can go down and right beginning from the root.">'],
['TopDownHistory Iterator', '(Spec)', 'href="SPEC_Top_Down_History+_Iterator.html" title="Iterator for suffix trees that can go down, right, and up. Supports depth-first search.">'],
['Topological Sort', '(Demo)', 'href="DEMO_Topological+_Sort.html" title="Topological sort of a graph.">'],
['topologicalSort', '(Function)', 'href="FUNCTION.topological_Sort.html" title="Performs a topological sort on a directed acyclic graph (DAG).">'],
['toSourcePosition', '(Function)', 'href="FUNCTION.to_Source_Position.html" title="Transforms view to source position, if the view position is a gap, the original position of the next non-gap entry is returned.">'],
['ToStdAllocator', '(Class)', 'href="CLASS_To_Std_Allocator.html" title="Emulates standard conform allocator.">'],
['ToStdAllocator', '(Memfunc)', 'href="MEMFUNC_To_Std_Allocator.html" title="Constructor">'],
['toUpper', '(Function)', 'href="FUNCTION.to_Upper.html" title="Convert characters in sequence or Class.StringSet to lower case in-place.">'],
['toViewPosition', '(Function)', 'href="FUNCTION.to_View_Position.html" title="Transforms source to view position.">'],
['TPos', '(Typedef)', 'href="TYPEDEF_Aligned_Read_Store_Element_23_T_Pos.html" title="Type of the beginPos and endPos members.">'],
['TPos', '(Typedef)', 'href="TYPEDEF_Contig_Store_Element_23_T_Pos.html" title="Type of the fileBeginPos and fileEndPos members.">'],
['TraceBack', '(Spec)', 'href="SPEC_Trace_Back.html" title=" Trace back values.">'],
['transition', '(Memvar)', 'href="MEMVAR_Markov_Model_23transition.html" title="The transition matrix.">'],
['transitionProbability', '(Function)', 'href="FUNCTION.transition_Probability.html" title="Returns a reference to the transition probability.">'],
['Transitive Closure', '(Demo)', 'href="DEMO_Transitive+_Closure.html" title="Transitive closure code example">'],
['transitiveClosure', '(Function)', 'href="FUNCTION.transitive_Closure.html" title="Determines whether there is a path between any two given vertices or not.">'],
['transpose', '(Function)', 'href="FUNCTION.transpose.html" title="Transposes a graph, either in-place or from source to dest.">'],
['TReadNameStore', '(Typedef)', 'href="TYPEDEF_Fragment_Store_23_T_Read_Name_Store.html" title="Type of the readNameStore member.">'],
['TReadSeqStore', '(Typedef)', 'href="TYPEDEF_Fragment_Store_23_T_Read_Seq_Store.html" title="Type of the readSeqStore member.">'],
['TReadStore', '(Typedef)', 'href="TYPEDEF_Fragment_Store_23_T_Read_Store.html" title="Type of the readStore member.">'],
['Tree', '(Spec)', 'href="SPEC_Tree.html" title="A Tree has a distinct root and directed edges. The source vertex of each edge is the parent vertex, the target vertex of each edge is the child. Trees provide fast access to child vertices and the parent.">'],
['Trie', '(Spec)', 'href="SPEC_Trie.html" title="A keyword trie.">'],
['Triple', '(Class)', 'href="CLASS_Triple.html" title="Stores three arbitrary objects.">'],
['Triple', '(Memfunc)', 'href="MEMFUNC_Triple_23_Triple.html" title="Constructor">'],
['tripletLibraryExtension', '(Function)', 'href="FUNCTION.triplet_Library_Extension.html" title="Performs a full or group-based consistency extension.">'],
['Tristate Holder', '(Spec)', 'href="SPEC_Tristate+_Holder.html" title="Holder that can be empty, dependent, or owner.">'],
['TSpec', '(Typedef)', 'href="TYPEDEF_Aligned_Read_Store_Element_23_T_Spec.html" title="The specialization type.">'],
['TSpec', '(Typedef)', 'href="TYPEDEF_Contig_Store_Element_23_T_Spec.html" title="The specialization type.">'],
['Tuple', '(Class)', 'href="CLASS_Tuple.html" title="A plain fixed-length string.">'],
['Tupler', '(Spec)', 'href="SPEC_Tupler.html" title="Outputs tuples of the tupleLen consecutive elements of the input stream.">'],
['Undirected Graph', '(Spec)', 'href="SPEC_Undirected+_Graph.html" title="An undirected graph that stores the edges in an adjacency list.">'],
['UngappedShape', '(Spec)', 'href="SPEC_Ungapped_Shape.html" title="A fixed length ungapped shape (also called q-gram or k-mer).">'],
['UnicodeIterator', '(Shortcut)', 'href="SHORTCUT_Unicode_Iterator.html" title="Iterator for Shortcut.UnicodeString.">'],
['UnicodeString', '(Shortcut)', 'href="SHORTCUT_Unicode_String.html" title="A string of wchar_t.">'],
['Uniform Pdf', '(Spec)', 'href="SPEC_Uniform+_Pdf.html" title="Uniform distribution probability density function over a closed interval [min, max].">'],
['unlockAndFreeContig', '(Function)', 'href="FUNCTION.unlock_And_Free_Contig.html" title="Removes a previous contig lock and clears sequence no further lock exist.">'],
['unlockAndFreeContigs', '(Function)', 'href="FUNCTION.unlock_And_Free_Contigs.html" title="Removes a previous lock for all contigs and clears sequences without lock.">'],
['unlockContig', '(Function)', 'href="FUNCTION.unlock_Contig.html" title="Removes a previous contig lock.">'],
['unlockContigs', '(Function)', 'href="FUNCTION.unlock_Contigs.html" title="Removes a previous lock for all contigs.">'],
['Upgma Configurator', '(Tag)', 'href="TAG_Upgma+_Configurator.html" title="A tag to configure the guide tree construction.">'],
['upgmaTree', '(Function)', 'href="FUNCTION.upgma_Tree.html" title="Computes a guide tree from a distance matrix.">'],
['upperBoundAlignedReads', '(Function)', 'href="FUNCTION.upper_Bound_Aligned_Reads.html" title="Performs a binary upper bound search on the aligned reads.">'],
['usage', '(Memvar)', 'href="MEMVAR_Contig_Store_Element_23usage.html" title="Counts the number of locks, see Function.lockContigs.">'],
['value', '(Function)', 'href="FUNCTION.map_23value.html" title="Returns a value given a key.">'],
['value', '(Function)', 'href="FUNCTION.value.html" title="Reference to the value.">'],
['Value', '(Metafunction)', 'href="METAFUNCTION_Value.html" title="Type of the items in the container.">'],
['valueById', '(Function)', 'href="FUNCTION.value_By_Id.html" title="Retrieves a string from the StringSet given an id.">'],
['valueConstruct', '(Function)', 'href="FUNCTION.value_Construct.html" title="Constructs an object at specified position.">'],
['valueConstructMove', '(Function)', 'href="FUNCTION.value_Construct_Move.html" title="Move constructs an object at specified position.">'],
['valueDestruct', '(Function)', 'href="FUNCTION.value_Destruct.html" title="Destoys an object at specified position.">'],
['ValueSize', '(Metafunction)', 'href="METAFUNCTION_Value_Size.html" title="Number of different values a value type object can have.">'],
['variance', '(Function)', 'href="FUNCTION.variance.html" title="Computes the variance for a set of patterns w.r.t. a set of text strings and a MarkovModel">'],
['VectorSet', '(Spec)', 'href="SPEC_Vector_Set.html" title="A fast map for small key types.">'],
['version', '(Function)', 'href="FUNCTION.version.html" title="Prints a version text to a stream.">'],
['Vertex Iterator', '(Spec)', 'href="SPEC_Vertex+_Iterator.html" title="Vertex iterator for Class.Graph.">'],
['VertexDescriptor', '(Metafunction)', 'href="METAFUNCTION_Vertex_Descriptor.html" title="Type of an object that represents a vertex descriptor.">'],
['VertexIdHandler', '(Metafunction)', 'href="METAFUNCTION_Vertex_Id_Handler.html" title="Type of an object that represents an Id Manager.">'],
['viterbiAlgorithm', '(Function)', 'href="FUNCTION.viterbi_Algorithm.html" title="Implements the viterbi algorithm.">'],
['VSTree Iterator', '(Spec)', 'href="SPEC_V_S_Tree+_Iterator.html" title="Abstract iterator for suffix trees.">'],
['Vtml200', '(Shortcut)', 'href="SHORTCUT_Vtml200.html" title="Vtml200 scoring matrix.">'],
['waitFor', '(Function)', 'href="FUNCTION.wait_For.html" title="Waits for an asynchronous request to complete.">'],
['weight', '(Function)', 'href="FUNCTION.weight.html" title="Number of relevant positions in a shape.">'],
['WEIGHT', '(Metafunction)', 'href="METAFUNCTION_W_E_I_G_H_T.html" title="Number of relevant positions in a shape.">'],
['Weight', '(Metafunction)', 'href="METAFUNCTION_Weight.html" title="Type of the weight of an item.">'],
['Wildcard Searching', '(Demo)', 'href="DEMO_Wildcard+_Searching.html" title="String matching using wildcards.">'],
['WildShiftAnd', '(Spec)', 'href="SPEC_Wild_Shift_And.html" title=" Exact string matching with wildcards using bit parallelism. The Shift-And algorithm is applicable to search small patterns in texts using a small alphabet.">'],
['windowFindBegin', '(Function)', 'href="FUNCTION.window_Find_Begin.html" title="Initializes the pattern. Sets the finder on the begin position.  Gets the first non-repeat range and sets it in the finder.  Used together with Function.windowFindBegin and Function.windowFindEnd.">'],
['windowFindEnd', '(Function)', 'href="FUNCTION.window_Find_End.html" title="Flushes the pattern. Used together with Function.windowFindBegin and Function.windowFindNext.">'],
['windowFindNext', '(Function)', 'href="FUNCTION.window_Find_Next.html" title="Searches over the next window with the finder. The found hits can be retrieved with Function.getSwiftHits  Used together with Function.windowFindBegin and Function.windowFindEnd.">'],
['Word Graph', '(Spec)', 'href="SPEC_Word+_Graph.html" title="A special automaton that stores words instead of single characters along its edges.">'],
['WOTD Index Fibres', '(Tag)', 'href="TAG_W_O_T_D+_Index+_Fibres.html" title="Tag to select a specific fibre (e.g. table, object, ...) of an Spec.IndexWotd index.">'],
['write', '(Function)', 'href="FUNCTION_Fileformat_23write.html" title="Writes to stream.">'],
['write', '(Function)', 'href="FUNCTION.write.html" title="Saves records to a file.">'],
['write', '(Memfunc)', 'href="MEMFUNC_Markov_Model_23write.html" title=" Stores an instance of MarkovModel on a file">'],
['writeAt', '(Function)', 'href="FUNCTION.write_At.html" title="Saves records to a specific position in a file.">'],
['writeContigs', '(Function)', 'href="FUNCTION.write_Contigs.html" title="Write contigs from fragment store into file.">'],
['WuManber', '(Spec)', 'href="SPEC_Wu_Manber.html" title="Online-algorithm for multi-pattern search.">'],
['Zoops', '(Tag)', 'href="TAG_Zoops.html" title="Represents the Zero or One Occurence Per Sequence model.">'],
['zscore', '(Function)', 'href="FUNCTION.zscore.html" title="Computes the z-score index for a set of patterns w.r.t. a set of text strings and a MarkovModel">'],
['~Holder', '(Memfunc)', 'href="MEMFUNC.~_Holder.html" title="Destructor">'],
false];
